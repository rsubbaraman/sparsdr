From d389a64796a71770f8380de6619dfc6228242476 Mon Sep 17 00:00:00 2001
From: Moein Khazraee <mkhazrae@cs.ucsd.edu>
Date: Fri, 8 Oct 2021 18:36:51 -0700
Subject: [PATCH] SparSDR V2

---
 library/axi_sparSDR/FFT_compression.v         |  799 +++++++++++++
 library/axi_sparSDR/FFT_encoder.v             |  159 +++
 library/axi_sparSDR/Makefile                  |   28 +
 library/axi_sparSDR/axi_sparSDR.v             |  225 ++++
 library/axi_sparSDR/axi_sparSDR_ip.tcl        |   82 ++
 library/axi_sparSDR/command_decoder.v         |  120 ++
 .../async_axis_fifo/async_axis_fifo.xci       |  128 +++
 .../coregen_ip/xfft_1024/xfft_1024.xci        |  210 ++++
 library/axi_sparSDR/half_windowed_FFTs_axis.v |  386 +++++++
 .../axi_sparSDR/mem_init_files/avg_1024.mif   |  512 +++++++++
 .../mem_init_files/hanning_coeffs_1024.mif    | 1024 +++++++++++++++++
 .../axi_sparSDR/mem_init_files/init_gen.py    |   39 +
 .../mem_init_files/mask_0_1_1023.mif          | 1024 +++++++++++++++++
 .../mem_init_files/threshold_1024.mif         | 1024 +++++++++++++++++
 library/axi_sparSDR/mem_n_fifo.v              |  166 +++
 projects/pluto/Makefile                       |    6 +-
 projects/pluto/system_bd.tcl                  |  104 +-
 17 files changed, 5957 insertions(+), 79 deletions(-)
 create mode 100755 library/axi_sparSDR/FFT_compression.v
 create mode 100644 library/axi_sparSDR/FFT_encoder.v
 create mode 100644 library/axi_sparSDR/Makefile
 create mode 100755 library/axi_sparSDR/axi_sparSDR.v
 create mode 100644 library/axi_sparSDR/axi_sparSDR_ip.tcl
 create mode 100755 library/axi_sparSDR/command_decoder.v
 create mode 100755 library/axi_sparSDR/coregen_ip/async_axis_fifo/async_axis_fifo.xci
 create mode 100755 library/axi_sparSDR/coregen_ip/xfft_1024/xfft_1024.xci
 create mode 100755 library/axi_sparSDR/half_windowed_FFTs_axis.v
 create mode 100755 library/axi_sparSDR/mem_init_files/avg_1024.mif
 create mode 100644 library/axi_sparSDR/mem_init_files/hanning_coeffs_1024.mif
 create mode 100644 library/axi_sparSDR/mem_init_files/init_gen.py
 create mode 100755 library/axi_sparSDR/mem_init_files/mask_0_1_1023.mif
 create mode 100644 library/axi_sparSDR/mem_init_files/threshold_1024.mif
 create mode 100755 library/axi_sparSDR/mem_n_fifo.v

diff --git a/library/axi_sparSDR/FFT_compression.v b/library/axi_sparSDR/FFT_compression.v
new file mode 100755
index 00000000..28817713
--- /dev/null
+++ b/library/axi_sparSDR/FFT_compression.v
@@ -0,0 +1,799 @@
+/*
+ * Copyright 2021 The Regents of the University of California
+ *
+ * Licensed under either the GNU General Public License, version 2
+ * ( https://www.gnu.org/licenses/old-licenses/gpl-2.0.html ) or the Apache
+ * license, version 2.0 ( https://www.apache.org/licenses/LICENSE-2.0.html )
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+// We assume input sampled data size to be 16-bits per I/Q
+module FFT_compression # (
+    parameter MAX_FFT_SIZE_LOG2      = 10,
+    parameter MAX_FFT_SIZE_LOG2_LOG2 = 4,
+    parameter SCALING_WIDTH          = 4,
+    // How many LSB bits go to FFT engine, between 9 and 16
+    parameter FFT_IN_DATA_WIDTH      = 16,
+    parameter FFT_FIFO_ADDR_WIDTH    = MAX_FFT_SIZE_LOG2 + 2,
+    parameter AVG_FIFO_ADDR_WIDTH    = MAX_FFT_SIZE_LOG2 + 2,
+    // Considering user config register is 32-bits wide, we can
+    // make masks of size up to 31 bits for average window size
+    // which declares how many FFT windows should pass before
+    // sending average values
+    parameter INPUT_TIME_BITS        = 31 + MAX_FFT_SIZE_LOG2
+)(
+    input                               dsp_clk,
+    input                               dsp_rst,
+
+    input                               set_stb_user,
+    input  [7:0]                        set_addr_user,
+    input  [31:0]                       set_data_user,
+
+    input  [15:0]                       sample_real,
+    input  [15:0]                       sample_imag,
+    input  [INPUT_TIME_BITS-1:0]        time_lsb,
+
+    output [31:0]                       FFT_out_data,
+    output [MAX_FFT_SIZE_LOG2-1:0]      FFT_out_index,
+    output [29:0]                       FFT_out_time,
+    output                              FFT_out_is_avg,
+    output                              FFT_out_no,
+    output                              FFT_out_valid,
+    input                               ready_i,
+
+    output                              new_window,
+    output                              compress_en,
+    output [MAX_FFT_SIZE_LOG2_LOG2-1:0] FFT_size_log2,
+
+    output                              fifo1_error,
+    output                              fifo2_error,
+    output                              avg_fifo_error,
+    output                              arbiter_error
+    );
+
+   // /////////////////////////////////////////////////////////////////////////
+   // Setting registers from software
+
+   wire [SCALING_WIDTH-1:0] scaling_shift;
+   wire [30:0] avg_time_mask;
+   wire [8:0]  avg_weight, new_weight;
+
+   wire FFT_en, FFT_send_en, avg_send_en;
+
+   wire        mask_wr_en;
+   wire [MAX_FFT_SIZE_LOG2-1:0] mask_wr_addr;
+   wire        mask_wr_data;
+
+   wire        threshold_wr_en;
+   wire [MAX_FFT_SIZE_LOG2-1:0] threshold_wr_addr;
+   wire [31:0] threshold_wr_data;
+
+   wire        hanning_wr_en;
+   wire [MAX_FFT_SIZE_LOG2-1:0] hanning_wr_addr;
+   wire [15:0] hanning_wr_data;
+
+   command_decoder # (
+       .MAX_FFT_SIZE_LOG2(MAX_FFT_SIZE_LOG2),
+       .MAX_FFT_SIZE_LOG2_LOG2(MAX_FFT_SIZE_LOG2_LOG2),
+       .FFT_IN_DATA_WIDTH(FFT_IN_DATA_WIDTH),
+       .SCALING_WIDTH(SCALING_WIDTH)
+   ) cmd_decoder (
+       .dsp_clk(dsp_clk),
+       .dsp_rst(dsp_rst),
+
+       .set_stb_user(set_stb_user),
+       .set_addr_user(set_addr_user),
+       .set_data_user(set_data_user),
+       .fifo_error(fifo1_error || fifo2_error || avg_fifo_error),
+
+       .FFT_size_log2(FFT_size_log2),
+       .scaling_shift(scaling_shift),
+       .avg_time_mask(avg_time_mask),
+       .avg_weight(avg_weight),
+       .new_weight(new_weight),
+
+       .FFT_en(FFT_en),
+       .FFT_send_en(FFT_send_en),
+       .avg_send_en(avg_send_en),
+       .compress_en(compress_en),
+
+       .mask_wr_en(mask_wr_en),
+       .mask_wr_addr(mask_wr_addr),
+       .mask_wr_data(mask_wr_data),
+
+       .threshold_wr_en(threshold_wr_en),
+       .threshold_wr_addr(threshold_wr_addr),
+       .threshold_wr_data(threshold_wr_data),
+
+       .hanning_wr_en(hanning_wr_en),
+       .hanning_wr_addr(hanning_wr_addr),
+       .hanning_wr_data(hanning_wr_data)
+   );
+
+   // Calculating avg memory masks based on FFT size,
+   // FFT size takes effect when it's (re-)enabled.
+   reg [MAX_FFT_SIZE_LOG2-1:0] avg_mem_sel_mask;
+   reg [MAX_FFT_SIZE_LOG2-2:0] avg_mem_addr_mask;
+   reg FFT_en_r;
+
+   always @ (posedge dsp_clk)
+      if (dsp_rst)
+         FFT_en_r <= 1'b0;
+      else
+         FFT_en_r <= FFT_en;
+
+   wire update_fft = (!FFT_en_r) && FFT_en;
+
+   always @ (posedge dsp_clk)
+     if (dsp_rst) begin
+       avg_mem_addr_mask <= {(MAX_FFT_SIZE_LOG2-1){1'b1}};
+       avg_mem_sel_mask  <= {1'b1,{(MAX_FFT_SIZE_LOG2-1){1'b0}}};
+     end else if (update_fft) begin
+       avg_mem_addr_mask <= {(MAX_FFT_SIZE_LOG2-1){1'b1}} >>
+                             (MAX_FFT_SIZE_LOG2 - FFT_size_log2);
+       avg_mem_sel_mask  <= {1'b1,{(MAX_FFT_SIZE_LOG2-1){1'b0}}} >>
+                             (MAX_FFT_SIZE_LOG2 - FFT_size_log2);
+     end
+
+   // Memory for mask setting
+   wire mask_out_1, mask_out_2;
+   wire [MAX_FFT_SIZE_LOG2-1:0] mask_addr_1, mask_addr_2,
+                                mask_read_addr_1, mask_read_addr_2;
+
+   assign mask_addr_1 = mask_wr_en ? mask_wr_addr : mask_read_addr_1;
+   assign mask_addr_2 = mask_read_addr_2;
+
+   mem_2rw #(
+      .DATA_WIDTH(1),
+      .ADDR_WIDTH(MAX_FFT_SIZE_LOG2),
+      .INIT_B_FILE("mask_0_1_1023.mif")
+   ) masks(
+      .clka(dsp_clk),
+      .ena(1'b1),
+      .wea(mask_wr_en),
+      .addra(mask_addr_1),
+      .dina(mask_wr_data),
+      .douta(mask_out_1),
+      .clkb(dsp_clk),
+      .enb(1'b1),
+      .web(1'b0),
+      .addrb(mask_addr_2),
+      .dinb(1'b0),
+      .doutb(mask_out_2)
+   );
+
+   // Memory for threshold setting
+   wire [31:0] threshold_out_1, threshold_out_2;
+   wire [MAX_FFT_SIZE_LOG2-1:0] threshold_addr_1, threshold_addr_2;
+
+   // Mask and threshold address are the same when reading
+   assign threshold_addr_1 = threshold_wr_en ? threshold_wr_addr : mask_read_addr_1;
+   assign threshold_addr_2 = mask_read_addr_2;
+
+   mem_2rw #(
+      .DATA_WIDTH(32),
+      .ADDR_WIDTH(MAX_FFT_SIZE_LOG2),
+      .INIT_B_FILE("threshold_1024.mif")
+   ) thresholds(
+     .clka(dsp_clk),
+     .ena(1'b1),
+     .wea(threshold_wr_en),
+     .addra(threshold_addr_1),
+     .dina(threshold_wr_data),
+     .douta(threshold_out_1),
+     .clkb(dsp_clk),
+     .enb(1'b1),
+     .web(1'b0),
+     .addrb(threshold_addr_2),
+     .dinb(32'd0),
+     .doutb(threshold_out_2)
+   );
+
+   // /////////////////////////////////////////////////////////////////////////
+   // Selecting portions of time bits
+
+   reg  [INPUT_TIME_BITS-1:0] time_lsb_r;
+   reg  [31:0] shifted_time_r;
+   wire [31:0] shifted_time = time_lsb_r >> (FFT_size_log2 - 1);
+
+   always @ (posedge dsp_clk)
+      if (dsp_rst) begin
+         time_lsb_r     <= {INPUT_TIME_BITS{1'b0}};
+         shifted_time_r <= 32'd0;
+      end else begin
+         time_lsb_r     <= time_lsb;
+         shifted_time_r <= shifted_time;
+      end
+
+   wire [29:0]                  selected_FFT_time    = shifted_time[29:0];
+   wire [MAX_FFT_SIZE_LOG2-1:0] FFT_start_time_check = time_lsb_r[MAX_FFT_SIZE_LOG2-1:0];
+   wire [29:0]                  selected_avg_time    = shifted_time_r[29:0];
+   wire [30:0]                  avg_start_time_check = shifted_time_r[31:1];
+
+   // /////////////////////////////////////////////////////////////////////////
+   // Perform windowed FFT on input data based on the settings
+
+    wire [15:0] fft1_out_real, fft1_out_imag;
+    wire [MAX_FFT_SIZE_LOG2-1:0] fft1_out_index;
+    wire        fft1_out_valid;
+
+    wire [15:0] fft2_out_real, fft2_out_imag;
+    wire [MAX_FFT_SIZE_LOG2-1:0] fft2_out_index;
+    wire        fft2_out_valid;
+
+  half_windowed_FFTs # (
+    .MAX_FFT_SIZE_LOG2(MAX_FFT_SIZE_LOG2),
+    .MAX_FFT_SIZE_LOG2_LOG2(MAX_FFT_SIZE_LOG2_LOG2),
+    .SCALING_WIDTH(SCALING_WIDTH),
+    .FFT_IN_DATA_WIDTH(FFT_IN_DATA_WIDTH)
+  ) windowed_FFTs (
+    .dsp_clk(dsp_clk),
+    .dsp_rst(dsp_rst),
+
+    .FFT_en(FFT_en),
+    .FFT_size_log2(FFT_size_log2),
+    .scaling_shift(scaling_shift),
+    .FFT_start_time_check(FFT_start_time_check),
+
+    .sample_real(sample_real),
+    .sample_imag(sample_imag),
+
+    .hanning_wr_en(hanning_wr_en),
+    .hanning_wr_addr(hanning_wr_addr),
+    .hanning_wr_data(hanning_wr_data),
+
+    .fft1_out_real(fft1_out_real),
+    .fft1_out_imag(fft1_out_imag),
+    .fft1_out_index(fft1_out_index),
+    .fft1_out_valid(fft1_out_valid),
+
+    .fft2_out_real(fft2_out_real),
+    .fft2_out_imag(fft2_out_imag),
+    .fft2_out_index(fft2_out_index),
+    .fft2_out_valid(fft2_out_valid)
+);
+
+   // /////////////////////////////////////////////////////////////////////////
+   // Average values memory.
+
+   // we need two writes and two reads per cycle, but we know writes addresses
+   // are always 1024 apart, same for read. So we use a 1r1w memory for each half.
+   // In each mem first port is used for write and second port for read
+   wire [31:0] avg_mem1_read_data,  avg_mem2_read_data;
+   wire [31:0] avg_mem1_write_data, avg_mem2_write_data;
+   wire [MAX_FFT_SIZE_LOG2-2:0]  avg_mem1_read_addr,   avg_mem2_read_addr;
+   wire [MAX_FFT_SIZE_LOG2-2:0]  avg_mem1_write_addr,  avg_mem2_write_addr;
+   wire        avg_mem1_wen,         avg_mem2_wen;
+
+   mem_2rw #(
+      .DATA_WIDTH(32),
+      .ADDR_WIDTH(MAX_FFT_SIZE_LOG2-1),
+      .INIT_B_FILE("avg_1024.mif")
+   ) avg_first_half(
+      .clka(dsp_clk),
+      .ena(1'b1),
+      .wea(avg_mem1_wen),
+      .addra(avg_mem1_write_addr),
+      .dina(avg_mem1_write_data),
+      .douta(),
+      .clkb(dsp_clk),
+      .enb(1'b1),
+      .web(1'b0),
+      .addrb(avg_mem1_read_addr),
+      .dinb(32'd0),
+      .doutb(avg_mem1_read_data)
+   );
+
+   mem_2rw #(
+      .DATA_WIDTH(32),
+      .ADDR_WIDTH(MAX_FFT_SIZE_LOG2-1),
+      .INIT_B_FILE("avg_1024.mif")
+   ) avg_second_half(
+      .clka(dsp_clk),
+      .ena(1'b1),
+      .wea(avg_mem2_wen),
+      .addra(avg_mem2_write_addr),
+      .dina(avg_mem2_write_data),
+      .douta(),
+      .clkb(dsp_clk),
+      .enb(1'b1),
+      .web(1'b0),
+      .addrb(avg_mem2_read_addr),
+      .dinb(32'd0),
+      .doutb(avg_mem2_read_data)
+   );
+
+
+   // /////////////////////////////////////////////////////////////////////////
+   // FFT output threshold filter, masking and average per bin calculation
+
+   // **** Pipeline stage 1: **** //
+   reg fft1_valid_r;
+   reg [15:0] fft1_out_real_r, fft1_out_imag_r;
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft1_out_index_r;
+
+   reg fft2_valid_r;
+   reg [15:0] fft2_out_real_r, fft2_out_imag_r;
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft2_out_index_r;
+
+   // registering FFT outputs
+   always@(posedge dsp_clk)
+      if (dsp_rst) begin
+         fft1_valid_r     <= 1'b0;
+         fft2_valid_r     <= 1'b0;
+      end else begin
+         fft1_valid_r     <= fft1_out_valid;
+         fft2_valid_r     <= fft2_out_valid;
+      end
+
+   always@(posedge dsp_clk) begin
+      fft1_out_real_r  <= fft1_out_real;
+      fft1_out_imag_r  <= fft1_out_imag;
+      fft1_out_index_r <= fft1_out_index;
+
+      fft2_out_real_r  <= fft2_out_real;
+      fft2_out_imag_r  <= fft2_out_imag;
+      fft2_out_index_r <= fft2_out_index;
+   end
+
+   // avg_mem has most pipeline stages, so we put the address as early as possible
+   // First 10 bits of fft outputs are the same, always 1024 apart
+   assign avg_mem1_read_addr = fft1_out_index[MAX_FFT_SIZE_LOG2-2:0] & avg_mem_addr_mask;
+   assign avg_mem2_read_addr = fft1_out_index[MAX_FFT_SIZE_LOG2-2:0] & avg_mem_addr_mask;
+
+   // **** Pipeline stage 2 **** //
+
+   reg [15:0] fft1_out_real_rr, fft1_out_imag_rr;
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft1_out_index_rr;
+   reg [31:0] magnitude1_r;
+   reg fft1_valid_rr;
+
+   reg [15:0] fft2_out_real_rr, fft2_out_imag_rr;
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft2_out_index_rr;
+   reg [31:0] magnitude2_r;
+   reg fft2_valid_rr;
+
+   // register avg_mem values, since in next stage there is multiplier
+   reg [31:0] avg_mem1_read_data_r,  avg_mem2_read_data_r;
+
+   //calculating magnitude of FFT outputs. Max value is 2^31 and is positive,
+   // so we drop last bit later.
+   wire [32:0] magnitude1 = (($signed(fft1_out_real_r) * $signed(fft1_out_real_r)) +
+                             ($signed(fft1_out_imag_r) * $signed(fft1_out_imag_r)));
+   wire [32:0] magnitude2 = (($signed(fft2_out_real_r) * $signed(fft2_out_real_r)) +
+                             ($signed(fft2_out_imag_r) * $signed(fft2_out_imag_r)));
+
+   // put mask_memory read address
+   assign mask_read_addr_1 = fft1_out_index_r;
+   assign mask_read_addr_2 = fft2_out_index_r;
+
+   always@(posedge dsp_clk) begin
+      if (dsp_rst) begin
+         magnitude1_r      <= 32'd0;
+         magnitude2_r      <= 32'd0;
+         fft1_valid_rr     <= 1'b0;
+         fft2_valid_rr     <= 1'b0;
+      end else begin
+         magnitude1_r      <= magnitude1[31:0];
+         fft1_out_real_rr  <= fft1_out_real_r;
+         fft1_out_imag_rr  <= fft1_out_imag_r;
+         fft1_out_index_rr <= fft1_out_index_r;
+         fft1_valid_rr     <= fft1_valid_r;
+
+         magnitude2_r      <= magnitude2[31:0];
+         fft2_out_real_rr  <= fft2_out_real_r;
+         fft2_out_imag_rr  <= fft2_out_imag_r;
+         fft2_out_index_rr <= fft2_out_index_r;
+         fft2_valid_rr     <= fft2_valid_r;
+
+         avg_mem1_read_data_r <= avg_mem1_read_data;
+         avg_mem2_read_data_r <= avg_mem2_read_data;
+      end
+   end
+
+   // **** Pipeline stage 3 **** //
+   // This is the last pipeline stage for FFT results, averaging needs one more
+
+   reg [15:0] fft1_out_real_rrr, fft1_out_imag_rrr;
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft1_out_index_rrr;
+   reg fft1_valid_rrr, fft1_large_enough_r, fft1_index_0_r;
+
+   reg [15:0] fft2_out_real_rrr, fft2_out_imag_rrr;
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft2_out_index_rrr;
+   reg fft2_valid_rrr, fft2_large_enough_r, fft2_index_0_r;
+
+   reg [23:0] fft1_new_operand_msb_r, fft1_new_operand_lsb_r;
+   reg [23:0] fft2_new_operand_msb_r, fft2_new_operand_lsb_r;
+   reg [23:0] mem1_avg_operand_msb_r, mem1_avg_operand_lsb_r;
+   reg [23:0] mem2_avg_operand_msb_r, mem2_avg_operand_lsb_r;
+   reg fft1_avg_write_r, fft2_avg_write_r;
+   reg avg_select_r;
+
+   // comparing with bin treshold and also masking
+   wire fft1_large_enough = (magnitude1_r > threshold_out_1) && mask_out_1;
+   wire fft2_large_enough = (magnitude2_r > threshold_out_2) && mask_out_2;
+
+   // 8 multiplies for LSB and MSB part of calculating average
+   // Since we have 18x18 DSPs we need to split it to meet timing
+   wire [24:0] fft1_new_operand_msb = magnitude1_r[31:16]         * new_weight;
+   wire [24:0] fft1_new_operand_lsb = magnitude1_r[15:0]          * new_weight;
+   wire [24:0] fft2_new_operand_msb = magnitude2_r[31:16]         * new_weight;
+   wire [24:0] fft2_new_operand_lsb = magnitude2_r[15:0]          * new_weight;
+   wire [24:0] mem1_avg_operand_msb = avg_mem1_read_data_r[31:16] * avg_weight;
+   wire [24:0] mem1_avg_operand_lsb = avg_mem1_read_data_r[15:0]  * avg_weight;
+   wire [24:0] mem2_avg_operand_msb = avg_mem2_read_data_r[31:16] * avg_weight;
+   wire [24:0] mem2_avg_operand_lsb = avg_mem2_read_data_r[15:0]  * avg_weight;
+
+   wire fft1_index_0 = (fft1_out_index_rr == 11'd0);
+   wire fft2_index_0 = (fft2_out_index_rr == 11'd0);
+
+   always@(posedge dsp_clk) begin
+      if(dsp_rst) begin
+         fft1_valid_rrr      <= 1'b0;
+         fft2_valid_rrr      <= 1'b0;
+         fft1_avg_write_r    <= 1'b0;
+         fft2_avg_write_r    <= 1'b0;
+      end else begin
+         fft1_out_real_rrr   <= fft1_out_real_rr;
+         fft1_out_imag_rrr   <= fft1_out_imag_rr;
+         fft1_out_index_rrr  <= fft1_out_index_rr;
+         // ** to make ordering in output of arbiter we always include index 0 in output,
+         // but if it's not large enough it would be dropped later **
+         fft1_valid_rrr      <= fft1_valid_rr && (fft1_large_enough || fft1_index_0);
+         fft1_large_enough_r <= fft1_large_enough;
+         fft1_index_0_r      <= fft1_index_0;
+
+         fft2_out_real_rrr   <= fft2_out_real_rr;
+         fft2_out_imag_rrr   <= fft2_out_imag_rr;
+         fft2_out_index_rrr  <= fft2_out_index_rr;
+         fft2_valid_rrr      <= fft2_valid_rr && (fft2_large_enough || fft2_index_0);
+         fft2_large_enough_r <= fft2_large_enough;
+         fft2_index_0_r      <= fft2_index_0;
+
+         // We know averaging weights are at most 2^8, so last bits are always 0
+         fft1_new_operand_msb_r  <= fft1_new_operand_msb[23:0];
+         fft1_new_operand_lsb_r  <= fft1_new_operand_lsb[23:0];
+         fft2_new_operand_msb_r  <= fft2_new_operand_msb[23:0];
+         fft2_new_operand_lsb_r  <= fft2_new_operand_lsb[23:0];
+         mem1_avg_operand_msb_r  <= mem1_avg_operand_msb[23:0];
+         mem1_avg_operand_lsb_r  <= mem1_avg_operand_lsb[23:0];
+         mem2_avg_operand_msb_r  <= mem2_avg_operand_msb[23:0];
+         mem2_avg_operand_lsb_r  <= mem2_avg_operand_lsb[23:0];
+         fft1_avg_write_r        <= fft1_valid_rr;
+         fft2_avg_write_r        <= fft2_valid_rr;
+         avg_select_r            <= |(fft1_out_index_rr & avg_mem_sel_mask);
+
+      end
+   end
+
+   // **** Pipeline stage 4 **** //
+
+   reg [39:0] fft1_new_operand_r, fft2_new_operand_r;
+   reg [39:0] fft1_avg_operand_r, fft2_avg_operand_r;
+   reg fft1_avg_write_rr, fft2_avg_write_rr;
+   reg [MAX_FFT_SIZE_LOG2-1:0] avg_index;
+   reg avg_select_rr;
+
+   // Completing the multiplication
+   wire [40:0] fft1_new_operand = {fft1_new_operand_msb_r, 16'd0} +
+                                  {16'd0, fft1_new_operand_lsb_r};
+   wire [40:0] fft2_new_operand = {fft2_new_operand_msb_r, 16'd0} +
+                                  {16'd0, fft2_new_operand_lsb_r};
+   wire [40:0] mem1_avg_operand = {mem1_avg_operand_msb_r, 16'd0} +
+                                  {16'd0, mem1_avg_operand_lsb_r};
+   wire [40:0] mem2_avg_operand = {mem2_avg_operand_msb_r, 16'd0} +
+                                  {16'd0, mem2_avg_operand_lsb_r};
+
+   // Corresponding the average_mem value and fft output based on the MSB of index
+   wire [40:0] fft1_avg_operand =  avg_select_r ? mem2_avg_operand : mem1_avg_operand;
+   wire [40:0] fft2_avg_operand = ~avg_select_r ? mem2_avg_operand : mem1_avg_operand;
+
+   always@(posedge dsp_clk) begin
+      if(dsp_rst) begin
+         fft1_avg_write_rr  <= 1'b0;
+         fft2_avg_write_rr  <= 1'b0;
+      end else begin
+         // We know averaging weights are at most 2^8, so last bits are always 0
+         fft1_new_operand_r <= fft1_new_operand[39:0];
+         fft2_new_operand_r <= fft2_new_operand[39:0];
+         fft1_avg_operand_r <= fft1_avg_operand[39:0];
+         fft2_avg_operand_r <= fft2_avg_operand[39:0];
+         fft1_avg_write_rr  <= fft1_avg_write_r;
+         fft2_avg_write_rr  <= fft2_avg_write_r;
+         avg_index          <= fft1_out_index_rrr;
+         avg_select_rr      <= avg_select_r;
+      end
+   end
+
+   // **** final stage **** //
+
+   // Calculating the new average
+   wire [40:0] fft1_new_avg = fft1_new_operand_r + fft1_avg_operand_r;
+   wire [40:0] fft2_new_avg = fft2_new_operand_r + fft2_avg_operand_r;
+
+   // setting the write address, data and enable for average_memory
+   assign avg_mem1_write_addr =  avg_index[MAX_FFT_SIZE_LOG2-2:0] & avg_mem_addr_mask;
+   assign avg_mem2_write_addr =  avg_index[MAX_FFT_SIZE_LOG2-2:0] & avg_mem_addr_mask;
+   assign avg_mem1_write_data =  avg_select_rr ? fft2_new_avg[39:8] : fft1_new_avg[39:8];
+   assign avg_mem2_write_data = ~avg_select_rr ? fft2_new_avg[39:8] : fft1_new_avg[39:8];
+   assign avg_mem1_wen        =  avg_select_rr ? fft2_avg_write_rr  : fft1_avg_write_rr;
+   assign avg_mem2_wen        = ~avg_select_rr ? fft2_avg_write_rr  : fft1_avg_write_rr;
+
+   // /////////////////////////////////////////////////////////////////////////
+   // Overflow handling
+   reg fft1_drop, fft2_drop;
+   always @ (posedge dsp_clk)
+      if (dsp_rst) begin
+         fft1_drop <= 1'b0;
+         fft2_drop <= 1'b0;
+      end else if (~FFT_send_en) begin // In dsp_rst it's set to 1, so this is overflow
+         fft1_drop <= 1'b1;
+         fft2_drop <= 1'b1;
+      end else begin
+         // fftx_drop does not get asserted otherwise. If FFT_send_en is back
+         // fft1_drop gets deasserted when index 0 is observed. fft2_drop
+         // should also wait for ff1_drop to be deasserted.
+         // Note that fftx_index_0 and fftx_valid_rr are one cycle look ahead.
+         fft1_drop <= fft1_drop && !(fft1_index_0 && fft1_valid_rr);
+         fft2_drop <= fft2_drop && !(fft2_index_0 && fft2_valid_rr && !fft1_drop);
+      end
+
+   // /////////////////////////////////////////////////////////////////////////
+   // FIFOs for each FFT and bin average values output
+   localparam FIFO_WIDTH     = 1+1+1+30+MAX_FFT_SIZE_LOG2+16+16;
+   localparam FFT_IND_START  = 32;
+   localparam TIME_IND_START = 32+MAX_FFT_SIZE_LOG2;
+
+   wire fifo1_not_full, fifo2_not_full, avg_fifo_not_full;
+   wire [FIFO_WIDTH-1:0] fft1_res, fft2_res;
+   wire [FIFO_WIDTH-3:0] avg_fifo_out;
+   wire fft1_res_v, fft2_res_v, avg_fifo_v;
+   reg  fft1_release, fft2_release;
+   reg  avg_fifo_release;
+
+   wire avg_fifo_in_v = fft1_avg_write_rr && avg_send_en &&
+                       ((avg_start_time_check & avg_time_mask)== 31'd0);
+
+   assign fifo1_error = (~fifo1_not_full) && fft1_valid_rrr;
+   assign fifo2_error = (~fifo2_not_full) && fft2_valid_rrr;
+   assign avg_fifo_error = (~avg_fifo_not_full) && avg_fifo_in_v;
+
+   wire fft_fifo_clear = (~FFT_send_en);
+   wire avg_fifo_clear = (~avg_send_en);
+
+   // Input for FFT FIFO is dropped if FIFO is full, or there is fftx_drop
+   // due to overflow. One sample can get away when FFT_send_en is deasserted
+   // but FIFO clear takes care of it.
+   simple_fifo #(.DATA_WIDTH(FIFO_WIDTH),.ADDR_WIDTH(FFT_FIFO_ADDR_WIDTH))
+   fft1_results_fifo
+   (.clk(dsp_clk),.reset(dsp_rst),.clear(fft_fifo_clear),
+    .din({fft1_index_0_r, fft1_large_enough_r, avg_select_r, selected_FFT_time,
+          fft1_out_index_rrr, fft1_out_real_rrr, fft1_out_imag_rrr}),
+    .din_valid(fft1_valid_rrr && !fft1_drop && fifo1_not_full),
+    .din_ready(fifo1_not_full), .dout(fft1_res),
+    .dout_valid(fft1_res_v), .dout_ready(fft1_release));
+
+   simple_fifo #(.DATA_WIDTH(FIFO_WIDTH),.ADDR_WIDTH(FFT_FIFO_ADDR_WIDTH))
+   fft2_results_fifo
+   (.clk(dsp_clk),.reset(dsp_rst),.clear(fft_fifo_clear),
+    .din({fft2_index_0_r, fft2_large_enough_r, ~avg_select_r, selected_FFT_time,
+          fft2_out_index_rrr, fft2_out_real_rrr, fft2_out_imag_rrr}),
+    .din_valid(fft2_valid_rrr && !fft2_drop && fifo2_not_full),
+    .din_ready(fifo2_not_full), .dout(fft2_res),
+    .dout_valid(fft2_res_v), .dout_ready(fft2_release));
+
+   // As long as FFT_en is asserted averages are computed properly,
+   // so no need to sync first sample after overflow like FFT.
+   simple_fifo #(.DATA_WIDTH(FIFO_WIDTH-2),.ADDR_WIDTH(AVG_FIFO_ADDR_WIDTH))
+   avg_mag_fifo
+   (.clk(dsp_clk),.reset(dsp_rst),.clear(avg_fifo_clear),
+    .din({selected_avg_time, avg_index, fft1_new_avg[39:8]}),
+    .din_valid(avg_fifo_in_v && avg_fifo_not_full), .din_ready(avg_fifo_not_full),
+    .dout(avg_fifo_out), .dout_valid(avg_fifo_v), .dout_ready(avg_fifo_release));
+
+   // /////////////////////////////////////////////////////////////////////////
+   // Arbiter before on chip network
+
+   // STATE MACHINE to check which FFT can send results
+   localparam IDLE      = 3'd0;
+   localparam SEND_FFT1 = 3'd1;
+   localparam SEND_FFT2 = 3'd2;
+   localparam SEND_AVG1 = 3'd3; // Goes to FFT1
+   localparam SEND_AVG2 = 3'd4; // Goes to FFT2
+   localparam ERROR     = 3'd5;
+
+   reg [2:0] state_r, state_n;
+   reg arbiter_err;
+
+   always @ (posedge dsp_clk)
+      if (dsp_rst || (!FFT_send_en && !avg_send_en))
+         state_r <= IDLE;
+      // To avoid hang in the case of FFT state
+      else if (!FFT_send_en && !arbiter_err)
+         state_r <= SEND_AVG1;
+      // In case of !avg_send_en, if we're in FFT state we won't notice,
+      // if in avg we send one more and then go to FFT
+      else
+         state_r <= state_n;
+
+   wire fft1_ind_is_0 = fft1_res[FIFO_WIDTH-1];
+   wire fft2_ind_is_0 = fft2_res[FIFO_WIDTH-1];
+
+   // We alternate between 2 FFT windows. If there is average samples,
+   // after finishing current FFT windows we send the averages and back
+   // to the other FFT window.
+   reg FFT_out_valid_r;
+   reg new_window_n, new_window_r;
+
+   always @ (*) begin
+      state_n          = state_r;
+      fft1_release     = 1'b0;
+      fft2_release     = 1'b0;
+      avg_fifo_release = 1'b0;
+      arbiter_err      = 1'b0;
+      // Keep new window asserted until transaction happens
+      new_window_n     = new_window_r && !(ready_i && FFT_out_valid_r);
+
+      if (ready_i || !FFT_out_valid_r)
+         case (state_r)
+            IDLE:
+               if (avg_fifo_v) begin
+                  avg_fifo_release = 1'b1;
+                  state_n = SEND_AVG1;
+                  new_window_n = 1'b1;
+               end else if (fft1_ind_is_0 && fft1_res_v) begin
+                  fft1_release = 1'b1;
+                  state_n = SEND_FFT1;
+                  new_window_n = 1'b1;
+               // We should receive FFT1 results first
+               end else if (fft2_ind_is_0 && fft2_res_v) begin
+                  state_n = ERROR;
+                  arbiter_err = 1'b1;
+               end
+
+            SEND_FFT1:
+               if ((!fft1_ind_is_0) && fft1_res_v) begin
+                  fft1_release = 1'b1;
+                  state_n = SEND_FFT1;
+               // We don't switch to other window until we see fft1_ind_is_0
+               end else if (fft1_ind_is_0 && fft1_res_v) begin
+                  if (avg_fifo_v) begin
+                     avg_fifo_release = 1'b1;
+                     state_n = SEND_AVG2;
+                     new_window_n = 1'b1;
+                  end else if (fft2_ind_is_0 && fft2_res_v) begin
+                     fft2_release = 1'b1;
+                     state_n = SEND_FFT2;
+                     new_window_n = 1'b1;
+                  // If there was no sample in FFT2 but we see ind0 in FFT1
+                  // something is wrong
+                  end else begin
+                     state_n = ERROR;
+                     arbiter_err = 1'b1;
+                  end
+               end
+
+            SEND_FFT2:
+               if ((!fft2_ind_is_0) && fft2_res_v) begin
+                  fft2_release = 1'b1;
+                  state_n = SEND_FFT2;
+               // We don't switch to other window until we see fft2_ind_is_0
+               end else if (fft2_ind_is_0 && fft2_res_v) begin
+                  if (avg_fifo_v) begin
+                     avg_fifo_release = 1'b1;
+                     state_n = SEND_AVG1;
+                     new_window_n = 1'b1;
+                  end else if (fft1_ind_is_0 && fft1_res_v) begin
+                     fft1_release = 1'b1;
+                     state_n = SEND_FFT1;
+                     new_window_n = 1'b1;
+                  // If there was no sample in FFT1 but we see ind0 in FFT2
+                  // something is wrong
+                  end else begin
+                     state_n = ERROR;
+                     arbiter_err = 1'b1;
+                  end
+               end
+
+            SEND_AVG1:
+               if (avg_fifo_v) begin
+                  avg_fifo_release = 1'b1;
+                  state_n = SEND_AVG1;
+               end else if (fft1_ind_is_0 && fft1_res_v) begin
+                  fft1_release = 1'b1;
+                  state_n = SEND_FFT1;
+                  new_window_n = 1'b1;
+               // We should receive FFT1 results now
+               end else if (fft2_ind_is_0 && fft2_res_v) begin
+                  state_n = ERROR;
+                  arbiter_err = 1'b1;
+               end
+
+            SEND_AVG2:
+               if (avg_fifo_v) begin
+                  avg_fifo_release = 1'b1;
+                  state_n = SEND_AVG2;
+               end else if (fft2_ind_is_0 && fft2_res_v) begin
+                  fft2_release = 1'b1;
+                  state_n = SEND_FFT2;
+                  new_window_n = 1'b1;
+               // We should receive FFT2 results now
+               end else if (fft1_ind_is_0 && fft1_res_v) begin
+                  state_n = ERROR;
+                  arbiter_err = 1'b1;
+               end
+
+            // Since we always send index 0, the ordering should be always alternating,
+            // if not something wrong has happened.
+            default:
+               begin
+                  state_n = ERROR;
+                  arbiter_err = 1'b1;
+               end
+
+         endcase
+      else if (state_r == ERROR) begin
+         arbiter_err = 1'b1;
+      end
+   end
+
+   assign arbiter_error = arbiter_err;
+
+   // MUX output value based on selected FFT
+   // If non of the FFTs can release or FFT1 is sending select would be 0,
+   // only if FFT2 is sending select would become 1
+   wire select = fft2_release;
+   wire [FIFO_WIDTH-2:0] select_res = select ? fft2_res[FIFO_WIDTH-2:0] :
+                                               fft1_res[FIFO_WIDTH-2:0];
+   // If it was an internal index 0 without passing the threshold and mask filter drop it
+   wire out_valid = (fft1_release || fft2_release) && select_res[FIFO_WIDTH-2];
+
+   // Selecting between average FIFO and selected FFT and registering the data for output
+   // to meet timing
+   reg [31:0]                  FFT_out_data_r;
+   reg [MAX_FFT_SIZE_LOG2-1:0] FFT_out_index_r;
+   reg [29:0]                  FFT_out_time_r;
+   reg                         FFT_out_is_avg_r;
+   reg                         FFT_out_no_r;
+
+   // Update the time stamp to show start of window, instead of sample time.
+   // When sample index is in the second half of window, we reduce the time stamp by 1.
+   wire [29:0] updated_time = (select_res[FIFO_WIDTH-3]) ?
+      (select_res[TIME_IND_START +: 30]-30'd1) : (select_res[TIME_IND_START +: 30]);
+
+   always@(posedge dsp_clk)
+      if (dsp_rst) begin
+         FFT_out_valid_r  <= 1'b0;
+         new_window_r     <= 1'b0;
+      // We have one register fifo, when ready_i signal is not high it keeps its previous
+      // value and fifos data is not released. When ready signal raises again the valid
+      // signal would not be masked and the register would also get updated.
+      end else if (ready_i || !FFT_out_valid_r) begin
+         FFT_out_time_r   <= avg_fifo_release ?
+                avg_fifo_out[TIME_IND_START +: 30] : updated_time;
+         FFT_out_index_r  <= avg_fifo_release ?
+                avg_fifo_out[FFT_IND_START+:MAX_FFT_SIZE_LOG2]  :
+                select_res[FFT_IND_START+:MAX_FFT_SIZE_LOG2];
+         FFT_out_data_r   <= avg_fifo_release ? avg_fifo_out[31:0] : select_res[31:0];
+         FFT_out_no_r     <= select;
+         FFT_out_is_avg_r <= avg_fifo_release;
+         FFT_out_valid_r  <= avg_fifo_release || out_valid;
+
+         new_window_r     <= new_window_n;
+      end
+
+   assign FFT_out_data   = FFT_out_data_r;
+   assign FFT_out_index  = FFT_out_index_r;
+   assign FFT_out_time   = FFT_out_time_r;
+   assign FFT_out_is_avg = FFT_out_is_avg_r;
+   assign FFT_out_no     = FFT_out_no_r;
+   assign FFT_out_valid  = FFT_out_valid_r;
+   assign new_window     = new_window_r;
+
+endmodule
diff --git a/library/axi_sparSDR/FFT_encoder.v b/library/axi_sparSDR/FFT_encoder.v
new file mode 100644
index 00000000..9abd39d0
--- /dev/null
+++ b/library/axi_sparSDR/FFT_encoder.v
@@ -0,0 +1,159 @@
+/*
+ * Copyright 2021 The Regents of the University of California
+ *
+ * Licensed under either the GNU General Public License, version 2
+ * ( https://www.gnu.org/licenses/old-licenses/gpl-2.0.html ) or the Apache
+ * license, version 2.0 ( https://www.apache.org/licenses/LICENSE-2.0.html )
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+module FFT_encoder # (
+  parameter MAX_FFT_SIZE_LOG2=10,
+  parameter MAX_FFT_SIZE_LOG2_LOG2=4
+) (
+  input                              dsp_clk,
+  input                              dsp_rst,
+
+  input [MAX_FFT_SIZE_LOG2_LOG2-1:0] FFT_size_log2,
+  input                              new_window,
+
+  input  [31:0]                      FFT_data,
+  input  [MAX_FFT_SIZE_LOG2-1:0]     FFT_index,
+  input  [29:0]                      FFT_time,
+  input                              FFT_is_avg,
+  input                              FFT_no,
+  input                              FFT_valid,
+  output                             FFT_ready,
+
+  output [31:0]                      enc_data,
+  output                             enc_valid,
+  input                              enc_ready
+);
+
+// We add a register for output. This is when that register is ready
+reg [31:0] enc_data_r;
+reg        enc_valid_r;
+wire       out_reg_ready = !enc_valid_r || enc_ready;
+
+// Based on FFT size determine the last index we expect to see
+reg [MAX_FFT_SIZE_LOG2-1:0] last_avg_index;
+always @ (posedge dsp_clk)
+  last_avg_index <= {MAX_FFT_SIZE_LOG2{1'b1}} >>
+                    (MAX_FFT_SIZE_LOG2-FFT_size_log2);
+
+// Keep last FFT and index when a data is acked
+reg [MAX_FFT_SIZE_LOG2-1:0] prev_index;
+
+always @ (posedge dsp_clk)
+  if (dsp_rst)
+    prev_index <= {MAX_FFT_SIZE_LOG2{1'b0}};
+  else if (FFT_valid && FFT_ready)
+    prev_index <= FFT_index;
+
+// Possible output 32 bits
+wire [31:0] header = {1'b1, FFT_is_avg, FFT_time};
+wire [31:0] index  = {{(32-MAX_FFT_SIZE_LOG2){1'b0}}, FFT_index};
+wire [31:0] data   = FFT_data;
+wire [31:0] pause  = 32'd0;
+
+// State machine states
+reg [2:0] state_n, state_r;
+localparam IDLE     = 0;
+localparam FFT_HDR  = 1;
+localparam FFT_BIN  = 2;
+localparam FFT_1ST  = 3;
+localparam FFT_MAIN = 4;
+localparam AVG_HDR  = 5;
+localparam AVG_DATA = 6;
+localparam AVG_PAUS = 7;
+
+// FFT_MAIN might output data or pause
+reg FFT_pause;
+
+always @ (posedge dsp_clk)
+  if (dsp_rst)
+     state_r <= IDLE;
+  else
+     state_r <= state_n;
+
+always @ (*) begin
+  state_n   = state_r;
+  FFT_pause = 1'b0;
+
+  // The state can change only when output is ready. Also most state changes
+  // require valid input, and few (e.g., FFT_HDR to FFT_BIN to FFT_1ST) that
+  // do not need valid, do not ack the input and FFT_valid stays asserted.
+  if (out_reg_ready && FFT_valid)
+    case (state_r)
+
+      IDLE:     if (FFT_is_avg)                state_n = AVG_HDR;
+                else                           state_n = FFT_HDR;
+
+      FFT_HDR:                                 state_n = FFT_BIN;
+
+      FFT_BIN:                                 state_n = FFT_1ST;
+
+      // First FFT data to update prev_index
+      FFT_1ST:                                 state_n = FFT_MAIN;
+
+      FFT_MAIN:
+                if (FFT_index==(prev_index+1)) state_n = FFT_MAIN;
+                else begin
+                  FFT_pause = 1'b1;
+                  if      (FFT_is_avg)         state_n = AVG_HDR;
+                  else if (new_window)         state_n = FFT_HDR;
+                  else                         state_n = FFT_BIN;
+                end
+
+      AVG_HDR:                                 state_n = AVG_DATA;
+
+      AVG_DATA: if (FFT_index==last_avg_index) state_n = AVG_PAUS;
+                else                           state_n = AVG_DATA;
+
+      // If there is no FFT data being backhauled, we go back to AVG_HDR
+      AVG_PAUS: if (FFT_is_avg)                state_n = AVG_HDR;
+                else                           state_n = FFT_HDR;
+    endcase
+
+end
+
+// Select output data based on the state and whether it's FFT_pause,
+// and also add an output register
+always @ (posedge dsp_clk)
+  if (out_reg_ready)
+    case (state_r)
+      FFT_HDR:
+        enc_data_r <= header;
+      FFT_BIN:
+        enc_data_r <= index;
+      FFT_1ST:
+        enc_data_r <= data;
+      FFT_MAIN:
+        enc_data_r <= FFT_pause ? pause : data;
+      AVG_HDR:
+        enc_data_r <= header;
+      AVG_DATA:
+        enc_data_r <= data;
+      default:
+        enc_data_r <= pause;
+    endcase
+
+always @ (posedge dsp_clk)
+  if (dsp_rst)
+    enc_valid_r <= 1'b0;
+  else if (out_reg_ready)
+    enc_valid_r <= FFT_valid && (state_r != IDLE);
+
+assign enc_valid = enc_valid_r;
+assign enc_data  = enc_data_r;
+assign FFT_ready = out_reg_ready && ((state_r == FFT_1ST)  ||
+                                     (state_r == AVG_DATA) ||
+                      (!FFT_pause && (state_r == FFT_MAIN)));
+
+endmodule
diff --git a/library/axi_sparSDR/Makefile b/library/axi_sparSDR/Makefile
new file mode 100644
index 00000000..3df799fe
--- /dev/null
+++ b/library/axi_sparSDR/Makefile
@@ -0,0 +1,28 @@
+####################################################################################
+## Copyright 2018(c) Analog Devices, Inc.
+## Auto-generated, do not modify!
+####################################################################################
+## Copyright 2019 The Regents of the University of California
+####################################################################################
+
+LIBRARY_NAME := axi_sparSDR
+
+GENERIC_DEPS += ../common/up_axi.v
+GENERIC_DEPS += ../common/ad_rst.v
+GENERIC_DEPS += mem_init_files/threshold_1024.mif
+GENERIC_DEPS += mem_init_files/hanning_coeffs_1024.mif
+GENERIC_DEPS += mem_init_files/mask_0_1_1023.mif
+GENERIC_DEPS += mem_init_files/avg_1024.mif
+GENERIC_DEPS += coregen_ip/xfft_1024/xfft_1024.xci
+GENERIC_DEPS += coregen_ip/async_axis_fifo/async_axis_fifo.xci
+GENERIC_DEPS += FFT_compression.v
+GENERIC_DEPS += FFT_encoder.v
+GENERIC_DEPS += half_windowed_FFTs_axis.v
+GENERIC_DEPS += command_decoder.v
+GENERIC_DEPS += mem_n_fifo.v
+GENERIC_DEPS += axi_sparSDR.v
+
+XILINX_DEPS += axi_sparSDR_ip.tcl
+XILINX_DEPS += ../xilinx/common/ad_rst_constr.xdc
+
+include ../scripts/library.mk
diff --git a/library/axi_sparSDR/axi_sparSDR.v b/library/axi_sparSDR/axi_sparSDR.v
new file mode 100755
index 00000000..da62dfbe
--- /dev/null
+++ b/library/axi_sparSDR/axi_sparSDR.v
@@ -0,0 +1,225 @@
+/*
+ * Copyright 2021 The Regents of the University of California
+ *
+ * Licensed under either the GNU General Public License, version 2
+ * ( https://www.gnu.org/licenses/old-licenses/gpl-2.0.html ) or the Apache
+ * license, version 2.0 ( https://www.apache.org/licenses/LICENSE-2.0.html )
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+`timescale 1ns / 100ps
+
+module axi_sparSDR # (
+    parameter AXI_ADDRESS_WIDTH      = 16,
+    parameter MAX_FFT_SIZE_LOG2      = 10,
+    parameter MAX_FFT_SIZE_LOG2_LOG2 = 4,
+    parameter SCALING_WIDTH          = 4,
+    // How many LSB bits go to FFT engine, between 9 and 16
+    parameter FFT_IN_DATA_WIDTH      = 13,
+    parameter FFT_FIFO_ADDR_WIDTH    = 12,
+    parameter AVG_FIFO_ADDR_WIDTH    = 12
+)(
+    input                             lgc_clk,
+    input  [15:0]                     sample_real,
+    input  [15:0]                     sample_imag,
+
+    // axi4 interface
+    input                             s_axi_aresetn,
+    input                             s_axi_aclk,
+    input                             s_axi_awvalid,
+    input   [(AXI_ADDRESS_WIDTH-1):0] s_axi_awaddr,
+    output                            s_axi_awready,
+    input                             s_axi_wvalid,
+    input   [31:0]                    s_axi_wdata,
+    input   [ 3:0]                    s_axi_wstrb,
+    output                            s_axi_wready,
+    output                            s_axi_bvalid,
+    output  [ 1:0]                    s_axi_bresp,
+    input                             s_axi_bready,
+    input                             s_axi_arvalid,
+    input   [(AXI_ADDRESS_WIDTH-1):0] s_axi_araddr,
+    output                            s_axi_arready,
+    output                            s_axi_rvalid,
+    output  [ 1:0]                    s_axi_rresp,
+    output  [31:0]                    s_axi_rdata,
+    input                             s_axi_rready,
+
+    output  [31:0]                    sparSDR_data,
+    output                            sparSDR_valid,
+    input                             dest_full,
+
+    output                            sparSDR_error
+);
+
+   wire lgc_rst;
+   // rst output of ad9361 module stays high, so made our own reset
+   ad_rst rst_gen (.rst_async(~s_axi_aresetn), .clk(lgc_clk), .rstn(), .rst(lgc_rst));
+
+   wire [AXI_ADDRESS_WIDTH-3:0] up_waddr;
+   wire                         up_wreq;
+   wire [31:0]                  up_wdata;
+   reg                          wr_wack;
+   wire                         fifo_ready;
+
+   // wire        set_stb_user_axi;
+   // wire [7:0]  set_addr_user_axi;
+   // wire [31:0] set_data_user_axi;
+   wire        set_stb_user;
+   wire [7:0]  set_addr_user;
+   wire [31:0] set_data_user;
+   reg         set_stb_user_r;
+   reg  [7:0]  set_addr_user_r;
+   reg  [31:0] set_data_user_r;
+
+   // Converting from AXI to addr and value
+   up_axi  #(.AXI_ADDRESS_WIDTH(AXI_ADDRESS_WIDTH)
+   ) converter (
+      .up_rstn(s_axi_aresetn),
+      .up_clk(s_axi_aclk),
+
+      // axi4 interface
+      .up_axi_awvalid(s_axi_awvalid),
+      .up_axi_awaddr (s_axi_awaddr),
+      .up_axi_awready(s_axi_awready),
+      .up_axi_wvalid (s_axi_wvalid),
+      .up_axi_wdata  (s_axi_wdata),
+      .up_axi_wstrb  (s_axi_wstrb),
+      .up_axi_wready (s_axi_wready),
+      .up_axi_bvalid (s_axi_bvalid),
+      .up_axi_bresp  (s_axi_bresp),
+      .up_axi_bready (s_axi_bready),
+      .up_axi_arvalid(s_axi_arvalid),
+      .up_axi_araddr (s_axi_araddr),
+      .up_axi_arready(s_axi_arready),
+      .up_axi_rvalid (s_axi_rvalid),
+      .up_axi_rresp  (s_axi_rresp),
+      .up_axi_rdata  (s_axi_rdata),
+      .up_axi_rready (s_axi_rready),
+
+      // pcore interface
+      .up_wreq(up_wreq),
+      .up_waddr(up_waddr),
+      .up_wdata(up_wdata),
+      .up_wack(wr_wack),
+
+      .up_rreq(),
+      .up_raddr(),
+      .up_rdata(32'd0),
+      .up_rack(1'b0)
+   );
+
+   // Async fifo to cross clock domains
+   async_axis_fifo user_setting_fifo (
+      .s_axis_aresetn(s_axi_aresetn),
+      .s_axis_aclk(s_axi_aclk),
+      .s_axis_tvalid(up_wreq),
+      .s_axis_tready(fifo_ready),
+      .s_axis_tdata({up_waddr[7:0], up_wdata}),
+      .m_axis_aclk(lgc_clk),
+      .m_axis_tvalid(set_stb_user),
+      .m_axis_tready(1'b1),
+      .m_axis_tdata({set_addr_user,set_data_user})
+   );
+
+   always @ (posedge s_axi_aclk)
+      if (!s_axi_aresetn)
+         wr_wack <= 1'b0;
+      else
+         wr_wack <= up_wreq && fifo_ready;
+
+   // Internal timer for time stamps
+   reg [40:0] time_counter;
+   always @ (posedge lgc_clk)
+      if (lgc_rst)
+         time_counter <= 0;
+      else
+         time_counter <= time_counter + 1;
+
+   // A slice register after async fifo
+   always @ (posedge lgc_clk)
+      if (lgc_rst)
+         set_stb_user_r <= 1'b0;
+      else begin
+         set_stb_user_r <= set_stb_user;
+         set_addr_user_r <= set_addr_user;
+         set_data_user_r <= set_data_user;
+      end
+
+   // FFT Compression
+   wire [3:0]  fft_size_log2;
+   wire [31:0] fft_data;
+   wire [29:0] fft_time;
+   wire [9:0]  fft_index;
+   wire fft_is_avg;
+   wire fft_valid;
+   wire fifo1_error, fifo2_error, avg_fifo_error, arbiter_error;
+   wire fft_no;
+   wire compress_en;
+   wire new_window;
+   wire fft_ready;
+
+   FFT_compression # (
+      .MAX_FFT_SIZE_LOG2(MAX_FFT_SIZE_LOG2),
+      .MAX_FFT_SIZE_LOG2_LOG2(MAX_FFT_SIZE_LOG2_LOG2),
+      .SCALING_WIDTH(SCALING_WIDTH),
+      .FFT_IN_DATA_WIDTH(FFT_IN_DATA_WIDTH),
+      .FFT_FIFO_ADDR_WIDTH(FFT_FIFO_ADDR_WIDTH),
+      .AVG_FIFO_ADDR_WIDTH(AVG_FIFO_ADDR_WIDTH)
+   ) compressor (
+      .dsp_clk(lgc_clk), .dsp_rst(lgc_rst), .FFT_size_log2(fft_size_log2),
+      .set_stb_user(set_stb_user_r), .set_addr_user(set_addr_user_r), .set_data_user(set_data_user_r),
+      .sample_real(sample_real), .sample_imag(sample_imag), .time_lsb(time_counter),
+      .FFT_out_data(fft_data), .FFT_out_index(fft_index), .FFT_out_time(fft_time),
+      .FFT_out_is_avg(fft_is_avg), .FFT_out_valid(fft_valid), .ready_i(fft_ready),
+      .FFT_out_no(fft_no), .compress_en(compress_en), .new_window(new_window),
+      .arbiter_error(arbiter_error), .fifo1_error(fifo1_error),
+      .fifo2_error(fifo2_error), .avg_fifo_error(avg_fifo_error)
+   );
+
+   wire [31:0] fft_enc_data;
+   wire        fft_enc_valid;
+   wire        fft_enc_ready;
+
+   FFT_encoder # (
+      .MAX_FFT_SIZE_LOG2(MAX_FFT_SIZE_LOG2),
+      .MAX_FFT_SIZE_LOG2_LOG2(MAX_FFT_SIZE_LOG2_LOG2)
+   ) encoder (
+      .dsp_clk(lgc_clk),
+      .dsp_rst(lgc_rst),
+
+      .FFT_size_log2(fft_size_log2),
+      .new_window(new_window),
+
+      .FFT_data(fft_data),
+      .FFT_index(fft_index),
+      .FFT_time(fft_time),
+      .FFT_is_avg(fft_is_avg),
+      .FFT_no(fft_no),
+      .FFT_valid(fft_valid),
+      .FFT_ready(fft_ready),
+
+      .enc_data(fft_enc_data),
+      .enc_valid(fft_enc_valid),
+      .enc_ready(fft_enc_ready)
+   );
+
+   // Match sparSDR_error to 1 cycle latency of FFT_encoder
+   reg  sparSDR_error_r;
+   always @ (posedge lgc_clk)
+      if (lgc_rst)
+         sparSDR_error_r <= 1'b0;
+      else
+         sparSDR_error_r <= arbiter_error || fifo1_error || fifo2_error || avg_fifo_error;
+
+   assign sparSDR_data  = compress_en ? fft_enc_data : {sample_imag, sample_real};
+   assign sparSDR_valid = compress_en ? fft_enc_valid && (!dest_full) : 1'b1;
+   assign fft_enc_ready = !dest_full;
+   assign sparSDR_error = sparSDR_error_r;
+
+endmodule
diff --git a/library/axi_sparSDR/axi_sparSDR_ip.tcl b/library/axi_sparSDR/axi_sparSDR_ip.tcl
new file mode 100644
index 00000000..1486802d
--- /dev/null
+++ b/library/axi_sparSDR/axi_sparSDR_ip.tcl
@@ -0,0 +1,82 @@
+source ../scripts/adi_env.tcl
+source $ad_hdl_dir/library/scripts/adi_ip_xilinx.tcl
+
+adi_ip_create axi_sparSDR
+
+read_ip coregen_ip//xfft_1024/xfft_1024.xci
+read_ip coregen_ip/async_axis_fifo/async_axis_fifo.xci
+
+adi_ip_files axi_sparSDR [list \
+  "mem_init_files/threshold_1024.mif" \
+  "mem_init_files/hanning_coeffs_1024.mif" \
+  "mem_init_files/mask_0_1_1023.mif" \
+  "mem_init_files/avg_1024.mif" \
+  "FFT_compression.v" \
+  "FFT_encoder.v" \
+  "half_windowed_FFTs_axis.v" \
+  "$ad_hdl_dir/library/common/up_axi.v" \
+  "$ad_hdl_dir/library/common/ad_rst.v" \
+  "$ad_hdl_dir/library/xilinx/common/ad_rst_constr.xdc" \
+  "command_decoder.v" \
+  "mem_n_fifo.v" \
+  "axi_sparSDR.v" ]
+
+adi_ip_properties_lite axi_sparSDR
+
+ipx::infer_bus_interface {\
+  s_axi_awvalid \
+  s_axi_awaddr \
+  s_axi_awready \
+  s_axi_wvalid \
+  s_axi_wdata \
+  s_axi_wstrb \
+  s_axi_wready \
+  s_axi_bvalid \
+  s_axi_bresp \
+  s_axi_bready \
+  s_axi_arvalid \
+  s_axi_araddr \
+  s_axi_arready \
+  s_axi_rvalid \
+  s_axi_rdata \
+  s_axi_rresp \
+  s_axi_rready} \
+xilinx.com:interface:aximm_rtl:1.0 [ipx::current_core]
+
+ipx::infer_bus_interface s_axi_aclk xilinx.com:signal:clock_rtl:1.0 [ipx::current_core]
+ipx::infer_bus_interface s_axi_aresetn xilinx.com:signal:reset_rtl:1.0 [ipx::current_core]
+
+ipx::add_bus_parameter ASSOCIATED_BUSIF [ipx::get_bus_interfaces s_axi_aclk \
+  -of_objects [ipx::current_core]]
+set_property value s_axi [ipx::get_bus_parameters ASSOCIATED_BUSIF \
+  -of_objects [ipx::get_bus_interfaces s_axi_aclk \
+  -of_objects [ipx::current_core]]]
+
+ipx::add_memory_map {s_axi} [ipx::current_core]
+set_property slave_memory_map_ref {s_axi} [ipx::get_bus_interfaces s_axi -of_objects [ipx::current_core]]
+ipx::add_address_block {fft_setting} [ipx::get_memory_maps s_axi -of_objects [ipx::current_core]]
+set_property range 4096 [ipx::get_address_blocks fft_setting \
+  -of_objects [ipx::get_memory_maps s_axi -of_objects [ipx::current_core]]]
+
+adi_add_bus "fifo_wr" "master" \
+	"analog.com:interface:fifo_wr_rtl:1.0" \
+	"analog.com:interface:fifo_wr:1.0" \
+	{ \
+		{"sparSDR_valid" "EN"} \
+		{"sparSDR_data" "DATA"} \
+		{"dest_full" "OVERFLOW"} \
+		{"sparSDR_valid" "SYNC"} \
+	}
+
+adi_add_bus_clock "lgc_clk" "fifo_wr"
+ipx::infer_bus_interface lgc_clk xilinx.com:signal:clock_rtl:1.0 [ipx::current_core]
+
+ipx::add_bus_parameter ASSOCIATED_BUSIF [ipx::get_bus_interfaces lgc_clk \
+  -of_objects [ipx::current_core]]
+set_property value m_axis [ipx::get_bus_parameters ASSOCIATED_BUSIF \
+  -of_objects [ipx::get_bus_interfaces lgc_clk \
+  -of_objects [ipx::current_core]]]
+
+ipx::create_xgui_files [ipx::current_core]
+
+ipx::save_core [ipx::current_core]
diff --git a/library/axi_sparSDR/command_decoder.v b/library/axi_sparSDR/command_decoder.v
new file mode 100755
index 00000000..80693ffc
--- /dev/null
+++ b/library/axi_sparSDR/command_decoder.v
@@ -0,0 +1,120 @@
+/*
+ * Copyright 2021 The Regents of the University of California
+ *
+ * Licensed under either the GNU General Public License, version 2
+ * ( https://www.gnu.org/licenses/old-licenses/gpl-2.0.html ) or the Apache
+ * license, version 2.0 ( https://www.apache.org/licenses/LICENSE-2.0.html )
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+module command_decoder # (
+    parameter MAX_FFT_SIZE_LOG2      = 10,
+    parameter MAX_FFT_SIZE_LOG2_LOG2 = 4,
+    parameter FFT_IN_DATA_WIDTH      = 16,
+    parameter SCALING_WIDTH          = 4
+)(
+    input                                   dsp_clk,
+    input                                   dsp_rst,
+
+    input                                   set_stb_user,
+    input      [7:0]                        set_addr_user,
+    input      [31:0]                       set_data_user,
+    input                                   fifo_error,
+
+    output reg [MAX_FFT_SIZE_LOG2_LOG2-1:0] FFT_size_log2,
+    output reg [SCALING_WIDTH-1:0]          scaling_shift,
+    output reg [30:0]                       avg_time_mask,
+    output reg [8:0]                        avg_weight,
+    output reg [8:0]                        new_weight,
+
+    output reg                              FFT_en,
+    output reg                              FFT_send_en,
+    output reg                              avg_send_en,
+    output reg                              compress_en,
+
+    output                                  mask_wr_en,
+    output     [MAX_FFT_SIZE_LOG2-1:0]      mask_wr_addr,
+    output                                  mask_wr_data,
+
+    output                                  threshold_wr_en,
+    output     [MAX_FFT_SIZE_LOG2-1:0]      threshold_wr_addr,
+    output reg [31:0]                       threshold_wr_data,
+
+    output                                  hanning_wr_en,
+    output     [MAX_FFT_SIZE_LOG2-1:0]      hanning_wr_addr,
+    output     [15:0]                       hanning_wr_data
+);
+
+   assign mask_wr_en   = (set_stb_user == 1'b1) && (set_addr_user == 8'd12);
+   assign mask_wr_addr = set_data_user[MAX_FFT_SIZE_LOG2:1];
+   assign mask_wr_data = ~set_data_user[0];
+
+   assign threshold_wr_en   = (set_stb_user == 1'b1) && (set_addr_user == 8'd11);
+   assign threshold_wr_addr = set_data_user[MAX_FFT_SIZE_LOG2-1:0];
+
+   assign hanning_wr_en   = (set_stb_user == 1'b1) &&
+                            (set_addr_user == 8'd18) && (~FFT_en);
+   assign hanning_wr_addr = set_data_user[16 +: MAX_FFT_SIZE_LOG2];
+   assign hanning_wr_data = set_data_user[15:0];
+
+   // We cannot send faster than every 8 windows, so if user sets less
+   // than 2^3 we would make it to be 2^3
+   wire [30:0] avg_time_mask_n = (set_data_user[4:0] < 5'd3) ? 31'd7 :
+                                 (31'h7FFFFFFF >> (5'd31-set_data_user[4:0]));
+
+   wire [MAX_FFT_SIZE_LOG2_LOG2-1:0] new_FFT_size;
+
+   assign new_FFT_size = (set_data_user[MAX_FFT_SIZE_LOG2_LOG2-1:0] < 3) ? 3 :
+                         (set_data_user[MAX_FFT_SIZE_LOG2_LOG2-1:0] > MAX_FFT_SIZE_LOG2) ?
+                          MAX_FFT_SIZE_LOG2 : set_data_user[MAX_FFT_SIZE_LOG2_LOG2-1:0];
+
+   // FFT output width minus the selected output width determines the shift amount.
+   // +1 comes from the FFT overflow consideration that sets FFT output size in bits.
+   localparam MAX_SHIFT = FFT_IN_DATA_WIDTH + MAX_FFT_SIZE_LOG2 + 1 - 16;
+
+   wire [SCALING_WIDTH-1:0] new_scaling_shift =
+                           (set_data_user[SCALING_WIDTH-1:0] < MAX_SHIFT) ?
+                            set_data_user[SCALING_WIDTH-1:0] : MAX_SHIFT  ;
+
+   always @ (posedge dsp_clk) begin
+     if (dsp_rst) begin
+       scaling_shift     <= MAX_SHIFT;
+       FFT_en            <= 1'b1;
+       FFT_send_en       <= 1'b1;
+       avg_send_en       <= 1'b1;
+       avg_weight        <= 9'b011100000;
+       new_weight        <= 9'b000100000;
+       avg_time_mask     <= 31'h0000FFFF;
+       compress_en       <= 1'b1;
+       FFT_size_log2     <= MAX_FFT_SIZE_LOG2;
+     end else if (set_stb_user == 1'b1) begin
+       case (set_addr_user)
+         8'd10: scaling_shift     <= new_scaling_shift;
+         // 8'd11: taken care of in threshold_wr_en
+         // 8'd12: taken care of in mask_wr_en
+         8'd13: begin
+                   avg_weight     <= {1'b0, set_data_user[7:0]};
+                   new_weight     <= 9'h100 - set_data_user[7:0];
+                end
+         8'd14: avg_time_mask     <= avg_time_mask_n;
+         8'd15: FFT_send_en       <= set_data_user[0] & compress_en;
+         8'd16: avg_send_en       <= set_data_user[0] & compress_en;
+         8'd17: FFT_en            <= set_data_user[0] & compress_en;
+         // 8'd18: taken care of in hanning_wr_en
+         8'd19: compress_en       <= set_data_user[0];
+         8'd20: FFT_size_log2     <= new_FFT_size;
+         8'd21: threshold_wr_data <= set_data_user;
+       endcase
+     end else if (fifo_error) begin
+               FFT_send_en <= 1'b0;
+               avg_send_en <= 1'b0;
+     end
+   end
+
+endmodule
diff --git a/library/axi_sparSDR/coregen_ip/async_axis_fifo/async_axis_fifo.xci b/library/axi_sparSDR/coregen_ip/async_axis_fifo/async_axis_fifo.xci
new file mode 100755
index 00000000..04f4c7eb
--- /dev/null
+++ b/library/axi_sparSDR/coregen_ip/async_axis_fifo/async_axis_fifo.xci
@@ -0,0 +1,128 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<spirit:design xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
+  <spirit:vendor>xilinx.com</spirit:vendor>
+  <spirit:library>xci</spirit:library>
+  <spirit:name>unknown</spirit:name>
+  <spirit:version>1.0</spirit:version>
+  <spirit:componentInstances>
+    <spirit:componentInstance>
+      <spirit:instanceName>async_axis_fifo</spirit:instanceName>
+      <spirit:componentRef spirit:vendor="xilinx.com" spirit:library="ip" spirit:name="axis_data_fifo" spirit:version="2.0"/>
+      <spirit:configurableElementValues>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.HAS_TKEEP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.HAS_TLAST">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.HAS_TREADY">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.HAS_TSTRB">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.LAYERED_METADATA">undef</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.TDATA_NUM_BYTES">5</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.TDEST_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.TID_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS.TUSER_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_CLKENIF.POLARITY">ACTIVE_LOW</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_CLKIF.ASSOCIATED_RESET"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_CLKIF.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_CLKIF.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_CLKIF.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_CLKIF.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.HAS_TKEEP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.HAS_TLAST">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.HAS_TREADY">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.HAS_TSTRB">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.LAYERED_METADATA">undef</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.TDATA_NUM_BYTES">5</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.TDEST_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.TID_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS.TUSER_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_CLKENIF.POLARITY">ACTIVE_LOW</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_CLKIF.ASSOCIATED_RESET"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_CLKIF.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_CLKIF.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_CLKIF.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_CLKIF.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_RSTIF.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_RSTIF.POLARITY">ACTIVE_LOW</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_ACLKEN_CONV_MODE">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIS_SIGNAL_SET">0b00000000000000000000000000000011</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIS_TDATA_WIDTH">40</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIS_TDEST_WIDTH">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIS_TID_WIDTH">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIS_TUSER_WIDTH">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_ECC_MODE">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_FAMILY">virtex7</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_FIFO_DEPTH">16</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_FIFO_MEMORY_TYPE">auto</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_FIFO_MODE">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_IS_ACLK_ASYNC">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PROG_EMPTY_THRESH">5</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PROG_FULL_THRESH">11</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_SYNCHRONIZER_STAGE">3</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_USE_ADV_FEATURES">825241648</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.ACLKEN_CONV_MODE">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.Component_Name">async_axis_fifo</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.ENABLE_ECC">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.FIFO_DEPTH">16</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.FIFO_MEMORY_TYPE">auto</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.FIFO_MODE">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_AEMPTY">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_AFULL">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_ECC_ERR_INJECT">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_PROG_EMPTY">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_PROG_FULL">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_RD_DATA_COUNT">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_TKEEP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_TLAST">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_TREADY">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_TSTRB">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HAS_WR_DATA_COUNT">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.IS_ACLK_ASYNC">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PROG_EMPTY_THRESH">5</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PROG_FULL_THRESH">11</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.SYNCHRONIZATION_STAGES">3</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.TDATA_NUM_BYTES">5</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.TDEST_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.TID_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.TUSER_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.ARCHITECTURE">virtex7</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.BASE_BOARD_PART"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.BOARD_CONNECTIONS"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.DEVICE">xc7vx485t</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.PACKAGE">ffg1157</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.PREFHDL">VERILOG</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SILICON_REVISION"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SIMULATOR_LANGUAGE">MIXED</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SPEEDGRADE">-1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.STATIC_POWER"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.TEMPERATURE_GRADE"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.USE_RDI_CUSTOMIZATION">TRUE</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.USE_RDI_GENERATION">TRUE</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.IPCONTEXT">IP_Flow</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.IPREVISION">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.MANAGED">TRUE</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.OUTPUTDIR">.</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SELECTEDSIMMODEL"/>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SHAREDDIR">.</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SWVERSION">2019.1.1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SYNTHESISFLOW">OUT_OF_CONTEXT</spirit:configurableElementValue>
+      </spirit:configurableElementValues>
+      <spirit:vendorExtensions>
+        <xilinx:componentInstanceExtensions>
+          <xilinx:configElementInfos>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS.TDATA_NUM_BYTES" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS.TDATA_NUM_BYTES" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.FIFO_DEPTH" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.IS_ACLK_ASYNC" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.TDATA_NUM_BYTES" xilinx:valueSource="user"/>
+          </xilinx:configElementInfos>
+        </xilinx:componentInstanceExtensions>
+      </spirit:vendorExtensions>
+    </spirit:componentInstance>
+  </spirit:componentInstances>
+</spirit:design>
diff --git a/library/axi_sparSDR/coregen_ip/xfft_1024/xfft_1024.xci b/library/axi_sparSDR/coregen_ip/xfft_1024/xfft_1024.xci
new file mode 100755
index 00000000..139cafaa
--- /dev/null
+++ b/library/axi_sparSDR/coregen_ip/xfft_1024/xfft_1024.xci
@@ -0,0 +1,210 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<spirit:design xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
+  <spirit:vendor>xilinx.com</spirit:vendor>
+  <spirit:library>xci</spirit:library>
+  <spirit:name>unknown</spirit:name>
+  <spirit:version>1.0</spirit:version>
+  <spirit:componentInstances>
+    <spirit:componentInstance>
+      <spirit:instanceName>xfft_1024</spirit:instanceName>
+      <spirit:componentRef spirit:vendor="xilinx.com" spirit:library="ip" spirit:name="xfft" spirit:version="9.1"/>
+      <spirit:configurableElementValues>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.ACLKEN_INTF.POLARITY">ACTIVE_LOW</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.ACLK_INTF.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.ACLK_INTF.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.ACLK_INTF.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.ACLK_INTF.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.ARESETN_INTF.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.EVENT_DATA_IN_CHANNEL_HALT_INTF.PortWidth">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.EVENT_DATA_OUT_CHANNEL_HALT_INTF.PortWidth">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.EVENT_FFT_OVERFLOW_INTF.PortWidth">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.EVENT_FRAME_STARTED_INTF.PortWidth">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.EVENT_STATUS_CHANNEL_HALT_INTF.PortWidth">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.EVENT_TLAST_MISSING_INTF.PortWidth">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.EVENT_TLAST_UNEXPECTED_INTF.PortWidth">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TKEEP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TLAST">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TREADY">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TSTRB">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.LAYERED_METADATA">undef</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TDATA_NUM_BYTES">8</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TDEST_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TID_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TUSER_WIDTH">16</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TKEEP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TLAST">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TREADY">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TSTRB">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.LAYERED_METADATA">undef</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TDATA_NUM_BYTES">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TDEST_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TID_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TUSER_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TKEEP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TLAST">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TREADY">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TSTRB">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.LAYERED_METADATA">undef</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TDATA_NUM_BYTES">2</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TDEST_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TID_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TUSER_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.CLK_DOMAIN"/>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.FREQ_HZ">100000000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TKEEP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TLAST">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TREADY">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TSTRB">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.INSERT_VIP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.LAYERED_METADATA">undef</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.PHASE">0.000</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TDATA_NUM_BYTES">4</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TDEST_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TID_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TUSER_WIDTH">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_ARCH">3</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_BFLY_TYPE">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_BRAM_STAGES">3</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_CHANNELS">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_CMPY_TYPE">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_DATA_MEM_TYPE">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_ACLKEN">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_ARESETN">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_BFP">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_CYCLIC_PREFIX">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_NATURAL_INPUT">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_NATURAL_OUTPUT">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_NFFT">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_OVFLO">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_ROUNDING">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_SCALING">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HAS_XK_INDEX">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_INPUT_WIDTH">13</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_M_AXIS_DATA_TDATA_WIDTH">48</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_M_AXIS_DATA_TUSER_WIDTH">16</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_M_AXIS_STATUS_TDATA_WIDTH">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_NFFT_MAX">10</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_OPTIMIZE_GOAL">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_OUTPUT_WIDTH">24</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_REORDER_MEM_TYPE">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_S_AXIS_CONFIG_TDATA_WIDTH">16</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_S_AXIS_DATA_TDATA_WIDTH">32</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_THROTTLE_SCHEME">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_TWIDDLE_MEM_TYPE">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_TWIDDLE_WIDTH">8</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_USE_FLT_PT">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_USE_HYBRID_RAM">0</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_XDEVICEFAMILY">virtex7</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.Component_Name">xfft_1024</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.aclken">false</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.aresetn">true</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.butterfly_type">use_luts</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.channels">1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.complex_mult_type">use_mults_resources</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.cyclic_prefix_insertion">false</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.data_format">fixed_point</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.implementation_options">pipelined_streaming_io</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.input_width">13</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.memory_options_data">block_ram</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.memory_options_hybrid">false</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.memory_options_phase_factors">block_ram</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.memory_options_reorder">block_ram</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.number_of_stages_using_block_ram_for_data_and_phase_factors">3</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.output_ordering">natural_order</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.ovflo">false</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.phase_factor_width">8</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.rounding_modes">truncation</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.run_time_configurable_transform_length">true</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.scaling_options">unscaled</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.target_clock_frequency">250</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.target_data_throughput">50</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.throttle_scheme">realtime</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.transform_length">1024</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.xk_index">true</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.ARCHITECTURE">virtex7</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.BASE_BOARD_PART"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.BOARD_CONNECTIONS"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.DEVICE">xc7vx485t</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.PACKAGE">ffg1157</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.PREFHDL">VERILOG</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SILICON_REVISION"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SIMULATOR_LANGUAGE">MIXED</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SPEEDGRADE">-1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.STATIC_POWER"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.TEMPERATURE_GRADE"/>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.USE_RDI_CUSTOMIZATION">TRUE</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.USE_RDI_GENERATION">TRUE</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.IPCONTEXT">IP_Flow</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.IPREVISION">2</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.MANAGED">TRUE</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.OUTPUTDIR">.</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SELECTEDSIMMODEL"/>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SHAREDDIR">.</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SWVERSION">2019.1.1</spirit:configurableElementValue>
+        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SYNTHESISFLOW">OUT_OF_CONTEXT</spirit:configurableElementValue>
+      </spirit:configurableElementValues>
+      <spirit:vendorExtensions>
+        <xilinx:componentInstanceExtensions>
+          <xilinx:configElementInfos>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TKEEP" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TLAST" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TREADY" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.HAS_TSTRB" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TDATA_NUM_BYTES" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TDEST_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TID_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_DATA.TUSER_WIDTH" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TKEEP" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TLAST" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TREADY" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.HAS_TSTRB" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TDATA_NUM_BYTES" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TDEST_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TID_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXIS_STATUS.TUSER_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TKEEP" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TLAST" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TREADY" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.HAS_TSTRB" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TDATA_NUM_BYTES" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TDEST_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TID_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_CONFIG.TUSER_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TKEEP" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TLAST" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TREADY" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.HAS_TSTRB" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TDATA_NUM_BYTES" xilinx:valueSource="auto"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TDEST_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TID_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXIS_DATA.TUSER_WIDTH" xilinx:valueSource="constant"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.aresetn" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.implementation_options" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.input_width" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.memory_options_reorder" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.number_of_stages_using_block_ram_for_data_and_phase_factors" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.output_ordering" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.ovflo" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.phase_factor_width" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.run_time_configurable_transform_length" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.scaling_options" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.throttle_scheme" xilinx:valueSource="user"/>
+            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.xk_index" xilinx:valueSource="user"/>
+          </xilinx:configElementInfos>
+        </xilinx:componentInstanceExtensions>
+      </spirit:vendorExtensions>
+    </spirit:componentInstance>
+  </spirit:componentInstances>
+</spirit:design>
diff --git a/library/axi_sparSDR/half_windowed_FFTs_axis.v b/library/axi_sparSDR/half_windowed_FFTs_axis.v
new file mode 100755
index 00000000..3a56c8eb
--- /dev/null
+++ b/library/axi_sparSDR/half_windowed_FFTs_axis.v
@@ -0,0 +1,386 @@
+/*
+ * Copyright 2021 The Regents of the University of California
+ *
+ * Licensed under either the GNU General Public License, version 2
+ * ( https://www.gnu.org/licenses/old-licenses/gpl-2.0.html ) or the Apache
+ * license, version 2.0 ( https://www.apache.org/licenses/LICENSE-2.0.html )
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+// start_time_n signal calculation must be updated based on timing
+// and size of the used FFT core. Thisi is marked by TODO.
+
+// This module is using legacy Xilinx FFT core which has 3 cycles
+// difference between input data and its index. Data timing needs
+// to be updated otherwise.
+module half_windowed_FFTs # (
+    parameter MAX_FFT_SIZE_LOG2      = 10,
+    parameter MAX_FFT_SIZE_LOG2_LOG2 = 4,
+    parameter SCALING_WIDTH          = 4,
+    // How many LSB bits go to FFT engine, between 9 and 16
+    parameter FFT_IN_DATA_WIDTH      = 16
+)(
+    input                               dsp_clk,
+    input                               dsp_rst,
+
+    // FFT setting
+    input                               FFT_en,
+    input  [MAX_FFT_SIZE_LOG2_LOG2-1:0] FFT_size_log2,
+    input  [SCALING_WIDTH-1:0]          scaling_shift,
+    input  [MAX_FFT_SIZE_LOG2-1:0]      FFT_start_time_check,
+
+    // Time domain samples
+    input  [15:0]                       sample_real,
+    input  [15:0]                       sample_imag,
+
+    // Update of window coefficients
+    input                               hanning_wr_en,
+    input  [MAX_FFT_SIZE_LOG2-1:0]      hanning_wr_addr,
+    input  [15:0]                       hanning_wr_data,
+
+    // FFT1 output
+    output [15:0]                       fft1_out_real,
+    output [15:0]                       fft1_out_imag,
+    output [MAX_FFT_SIZE_LOG2-1:0]      fft1_out_index,
+    output                              fft1_out_valid,
+
+    // FFT2 output
+    output [15:0]                       fft2_out_real,
+    output [15:0]                       fft2_out_imag,
+    output [MAX_FFT_SIZE_LOG2-1:0]      fft2_out_index,
+    output                              fft2_out_valid
+);
+   // Latch input samples
+   reg [15:0] sample_real_r, sample_imag_r;
+   always @ (posedge dsp_clk) begin
+     sample_real_r <= sample_real;
+     sample_imag_r <= sample_imag;
+   end
+
+   // /////////////////////////////////////////////////////////////////////////
+   // FFT timing setting
+
+   // We want the scaling value to be written before the first FFT start
+   // It should be high only single cycle. Also if FFT size is changed
+   // start time needs to be updated.
+   reg FFT_en_r;
+   always @ (posedge dsp_clk)
+      if (dsp_rst)
+         FFT_en_r <= 1'b0;
+      else
+         FFT_en_r <= FFT_en;
+
+    wire update_fft = (!FFT_en_r) && FFT_en;
+
+   // FFT start time calculation, so output is synced with time stamp
+   reg start;
+   reg [MAX_FFT_SIZE_LOG2-1:0] start_time_n;
+   reg [MAX_FFT_SIZE_LOG2-1:0] FFT1_start_time;
+   reg [MAX_FFT_SIZE_LOG2-1:0] hanning_addr_mask;
+   reg [MAX_FFT_SIZE_LOG2-1:0] hanning_flip_bit;
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft2_start_ind, fft2_end_ind;
+
+   // TODO update if using other FFT module
+   // There is 5 cycles additional latency, 2 before the fft
+   // modules for reading hanning coefficients, and 1+3 afterwards
+   // to do rounding, thresholding and masking. Time stamps are asserted
+   // based on insertion time to fifo, to make fft with index 0
+   // occur at a time with log2 of fft size leading zeros, we substract the delay
+   // from window size and use it as start time. AXIS FFT also has 1 extra cycle
+   // delay as it deassertes ready for 1 cycle after very first data.
+   // So the formula becomes:
+   // MAX_FFT_size - (((FFT_delay+1)%fft_size)+5+1)
+   // For example, for max size of 1024 and delay 877 for size 256,
+   // start_time_n = 1024-((877%256)+5+1)=909
+   // MAX fft size is used to have similar values, but fft size would have
+   // worked too.
+   always @ (*)
+     case (FFT_size_log2)
+       4'd3:    start_time_n = 10'd1018;
+       4'd4:    start_time_n = 10'd1010;
+       4'd5:    start_time_n = 10'd992;
+       4'd6:    start_time_n = 10'd992;
+       4'd7:    start_time_n = 10'd912;
+       4'd8:    start_time_n = 10'd912;
+       4'd9:    start_time_n = 10'd897;
+       4'd10:   start_time_n = 10'd897;
+       default: start_time_n = 10'd897;
+    endcase
+
+   always @ (posedge dsp_clk)
+     if (dsp_rst) begin
+       FFT1_start_time   <= 10'd897;
+       hanning_flip_bit  <= {1'b1,{(MAX_FFT_SIZE_LOG2-1){1'b0}}};
+       hanning_addr_mask <= 10'd0;
+       fft2_start_ind    <= (1 << (MAX_FFT_SIZE_LOG2 - 1));
+       fft2_end_ind      <= (1 << (MAX_FFT_SIZE_LOG2 - 1));
+     end else if (update_fft) begin
+       FFT1_start_time   <= start_time_n;
+       // There are 2 cycles dealy for reading the hanning coeffs
+       hanning_flip_bit  <= (1 << (FFT_size_log2 - 1));
+       hanning_addr_mask <= {MAX_FFT_SIZE_LOG2{1'b1}} << FFT_size_log2;
+       fft2_start_ind    <= (1 << (FFT_size_log2 - 1));
+       fft2_end_ind      <= (1 << (FFT_size_log2 - 1));
+     end
+   // end TODO
+
+   // When user enables the FFT first FFT is allowed to start sampling.
+   // We configure start time of first FFT in a way that index 0 always
+   // lands in a time value with 11 zeros in LSB. Hence we can send
+   // higher order bits of time in each sample and use index as the LSB.
+   // Second FFT starts after the first one gets to half its window.
+   wire fft1_ready, fft2_ready;
+   always@(posedge dsp_clk)
+      if (dsp_rst)
+         start <= 1'b0;
+      else
+         start <= FFT_en && ((fft1_ready && fft2_ready &&
+                  // fft1_config_ready && fft2_config_ready &&
+                  (FFT_start_time_check == FFT1_start_time)) || start);
+
+   // /////////////////////////////////////////////////////////////////////////
+   // Windowing for FFT
+
+   reg [15:0] fft1_in_real, fft1_in_imag;
+   reg [15:0] fft2_in_real, fft2_in_imag;
+   wire [15:0] fft1_input_coeff, fft2_input_coeff;
+   reg [MAX_FFT_SIZE_LOG2-1:0] hanning_counter;
+
+   always @ (posedge dsp_clk)
+     if (dsp_rst)
+        hanning_counter <= {MAX_FFT_SIZE_LOG2{1'b0}};
+     else if (start) begin
+        if (fft1_ready)
+           if (&(hanning_counter | hanning_addr_mask))
+              hanning_counter <= {MAX_FFT_SIZE_LOG2{1'b0}};
+           else
+              hanning_counter <= hanning_counter + {{(MAX_FFT_SIZE_LOG2-1){1'b0}},1'b1};
+        end
+     else
+        hanning_counter <= {MAX_FFT_SIZE_LOG2{1'b0}};
+
+   // *** There is 3 cycles time difference between fft index and incoming data, so
+   // *** we can use 2 cycle for memory and 1 cycle for coefficient multiplication
+   // user register 18 is for updating contents of hanning window memory
+
+   // Dual port RAM using BRAM, output is regitered and read latency is 2 clock
+   // cycles Starts are half period apart, so their index is half period different.
+
+   wire [MAX_FFT_SIZE_LOG2-1:0] hanning_addr_1, hanning_addr_2;
+
+   assign hanning_addr_1 = hanning_wr_en ? hanning_wr_addr : hanning_counter;
+   // Flip the msb of counter, since they are half window apart
+   assign hanning_addr_2 = hanning_counter ^ hanning_flip_bit;
+
+   mem_2rw #(.DATA_WIDTH(16),.ADDR_WIDTH(MAX_FFT_SIZE_LOG2),
+             .INIT_B_FILE("hanning_coeffs_1024.mif"),
+             .REG_OUTPUT(1)) han_coeffs(
+      .clka(dsp_clk),
+      .ena(1'b1),
+      .wea(hanning_wr_en),
+      .addra(hanning_addr_1),
+      .dina(hanning_wr_data),
+      .douta(fft1_input_coeff),
+      .clkb(dsp_clk),
+      .enb(1'b1),
+      .web(1'b0),
+      .addrb(hanning_addr_2),
+      .dinb(1'b0),
+      .doutb(fft2_input_coeff)
+   );
+
+   // Cycle 3, multiplying
+   wire [32:0] windowed_fft1_real = ($signed({1'b0, fft1_input_coeff})) *
+                                    ($signed(sample_real_r));
+   wire [32:0] windowed_fft1_imag = ($signed({1'b0, fft1_input_coeff})) *
+                                    ($signed(sample_imag_r));
+
+   wire [32:0] windowed_fft2_real = ($signed({1'b0, fft2_input_coeff})) *
+                                    ($signed(sample_real_r));
+   wire [32:0] windowed_fft2_imag = ($signed({1'b0, fft2_input_coeff})) *
+                                    ($signed(sample_imag_r));
+
+   always@(posedge dsp_clk) begin
+      fft1_in_real <= {windowed_fft1_real[32], windowed_fft1_real[30:16]};
+      fft1_in_imag <= {windowed_fft1_imag[32], windowed_fft1_imag[30:16]};
+
+      fft2_in_real <= {windowed_fft2_real[32], windowed_fft2_real[30:16]};
+      fft2_in_imag <= {windowed_fft2_imag[32], windowed_fft2_imag[30:16]};
+   end
+
+   // /////////////////////////////////////////////////////////////////////////
+   // FFT modules
+
+   reg fft1_start;
+   reg fft2_start;
+   reg fft1_last;
+   reg fft2_last;
+
+   reg update_fft1, update_fft2;
+   wire [15:0] fft1_tuser, fft2_tuser;
+   wire fft1_config_ready, fft2_config_ready;
+
+   // There are 2 cycles dealy for ready the hanning coeffs
+   // Next cycle output of multiply is ready and input data to FFT is valid
+   always@(posedge dsp_clk) begin
+      if (dsp_rst) begin
+         fft1_start <= 1'b0;
+         fft2_start <= 1'b0;
+      end else begin
+         fft1_start <= start && ((hanning_counter == 1) || fft1_start);
+         fft2_start <= start && ((hanning_counter == fft2_start_ind) || fft2_start);
+      end
+   end
+
+   // Handshake for fft configuration update, waiting for config ready signal to be asserted
+   always@(posedge dsp_clk)
+      if (dsp_rst) begin
+         update_fft1 <= 1'b0;
+         update_fft2 <= 1'b0;
+      end else begin
+         update_fft1 <= ((update_fft|update_fft1) && !fft1_config_ready);
+         update_fft2 <= ((update_fft|update_fft2) && !fft2_config_ready);
+      end
+
+   always@(posedge dsp_clk)
+      if (dsp_rst) begin
+         fft1_last <= 1'b0;
+         fft2_last <= 1'b0;
+      end else begin
+         fft1_last <= fft1_start && (hanning_counter == 0);
+         fft2_last <= fft2_start && (hanning_counter == fft2_end_ind);
+      end
+
+   localparam FFT_OUT_WIDTH  = FFT_IN_DATA_WIDTH + MAX_FFT_SIZE_LOG2 + 1;
+   localparam FFT_OUT_PADDED = (FFT_OUT_WIDTH%8==0) ?
+                                FFT_OUT_WIDTH : ((FFT_OUT_WIDTH/8)+1)*8;
+   localparam FFT_SIZE_PAD   = 8 - MAX_FFT_SIZE_LOG2_LOG2;
+
+   wire [FFT_OUT_PADDED-1:0] fft1_out_real_padded, fft1_out_imag_padded;
+   wire [FFT_OUT_PADDED-1:0] fft2_out_real_padded, fft2_out_imag_padded;
+   wire [FFT_OUT_WIDTH-1:0]  fft1_out_real_n,      fft1_out_imag_n;
+   wire [FFT_OUT_WIDTH-1:0]  fft2_out_real_n,      fft2_out_imag_n;
+   wire                      fft1_out_valid_n,     fft2_out_valid_n;
+
+   xfft_1024 FFT1 (
+     .aclk(dsp_clk),
+     .aresetn(~dsp_rst && FFT_en),
+     .s_axis_config_tdata({8'd1, {FFT_SIZE_PAD{1'b0}}, FFT_size_log2}),
+
+     .s_axis_config_tvalid(update_fft | update_fft1),
+     .s_axis_config_tready(fft1_config_ready),
+     .s_axis_data_tdata({fft1_in_imag, fft1_in_real}),
+     .s_axis_data_tvalid(fft1_start),
+     .s_axis_data_tready(fft1_ready),
+     .s_axis_data_tlast(fft1_last),
+
+     .m_axis_data_tdata({fft1_out_imag_padded, fft1_out_real_padded}),
+     .m_axis_data_tuser(fft1_tuser),
+     .m_axis_data_tvalid(fft1_out_valid_n),
+     .m_axis_data_tlast(),
+
+     .event_frame_started(),
+     .event_tlast_unexpected(),
+     .event_tlast_missing(),
+     .event_data_in_channel_halt()
+   );
+
+   assign fft1_out_real_n = fft1_out_real_padded[FFT_OUT_WIDTH-1:0];
+   assign fft1_out_imag_n = fft1_out_imag_padded[FFT_OUT_WIDTH-1:0];
+
+   xfft_1024 FFT2 (
+     .aclk(dsp_clk),
+     .aresetn(~dsp_rst && FFT_en),
+     .s_axis_config_tdata({8'd1, {FFT_SIZE_PAD{1'b0}}, FFT_size_log2}),
+
+     .s_axis_config_tvalid(update_fft | update_fft2),
+     .s_axis_config_tready(fft2_config_ready),
+     .s_axis_data_tdata({fft2_in_imag, fft2_in_real}),
+     .s_axis_data_tvalid(fft2_start),
+     .s_axis_data_tready(fft2_ready),
+     .s_axis_data_tlast(fft2_last),
+
+     .m_axis_data_tdata({fft2_out_imag_padded, fft2_out_real_padded}),
+     .m_axis_data_tuser(fft2_tuser),
+     .m_axis_data_tvalid(fft2_out_valid_n),
+     .m_axis_data_tlast(),
+
+     .event_frame_started(),
+     .event_tlast_unexpected(),
+     .event_tlast_missing(),
+     .event_data_in_channel_halt()
+   );
+
+   assign fft2_out_real_n = fft2_out_real_padded[FFT_OUT_WIDTH-1:0];
+   assign fft2_out_imag_n = fft2_out_imag_padded[FFT_OUT_WIDTH-1:0];
+
+   // Calculate addition terms for rounding
+   reg [FFT_OUT_WIDTH-1:0] one_rounder, zero_rounder;
+
+   always @ (posedge dsp_clk) begin
+      one_rounder  <= {{FFT_IN_DATA_WIDTH{1'b0}}, 1'b1, {MAX_FFT_SIZE_LOG2{1'b0}}} >>
+                      ((MAX_FFT_SIZE_LOG2+1)-scaling_shift);
+      zero_rounder <= {{FFT_IN_DATA_WIDTH{1'b0}}, 1'b0, {MAX_FFT_SIZE_LOG2{1'b1}}} >>
+                      ((MAX_FFT_SIZE_LOG2+1)-scaling_shift);
+   end
+
+   // Perform rounding
+   wire [FFT_OUT_WIDTH-1:0] fft1_out_real_rounded = fft1_out_real_n[scaling_shift] ?
+                    fft1_out_real_n + one_rounder : fft1_out_real_n + zero_rounder;
+   wire [FFT_OUT_WIDTH-1:0] fft1_out_imag_rounded = fft1_out_imag_n[scaling_shift] ?
+                    fft1_out_imag_n + one_rounder : fft1_out_imag_n + zero_rounder;
+
+   wire [FFT_OUT_WIDTH-1:0] fft2_out_real_rounded = fft2_out_real_n[scaling_shift] ?
+                    fft2_out_real_n + one_rounder : fft2_out_real_n + zero_rounder;
+   wire [FFT_OUT_WIDTH-1:0] fft2_out_imag_rounded = fft2_out_imag_n[scaling_shift] ?
+                    fft2_out_imag_n + one_rounder : fft2_out_imag_n + zero_rounder;
+
+   // FFT scaling and register the output
+   reg [15:0] fft1_out_real_r, fft1_out_imag_r;
+   reg [15:0] fft2_out_real_r, fft2_out_imag_r;
+
+   // reg fft1_out_real_ovfl, fft1_out_imag_ovfl;
+   // reg fft2_out_real_ovfl, fft2_out_imag_ovfl;
+
+   reg [MAX_FFT_SIZE_LOG2-1:0] fft1_out_index_r, fft2_out_index_r;
+   reg fft1_out_valid_r, fft2_out_valid_r;
+
+   always @ (posedge dsp_clk) begin
+      fft1_out_real_r <= fft1_out_real_rounded[scaling_shift +: 16];
+      fft1_out_imag_r <= fft1_out_imag_rounded[scaling_shift +: 16];
+      fft2_out_real_r <= fft2_out_real_rounded[scaling_shift +: 16];
+      fft2_out_imag_r <= fft2_out_imag_rounded[scaling_shift +: 16];
+
+      fft1_out_index_r <= fft1_tuser[MAX_FFT_SIZE_LOG2-1:0];
+      fft1_out_valid_r <= fft1_out_valid_n;
+      fft2_out_index_r <= fft2_tuser[MAX_FFT_SIZE_LOG2-1:0];
+      fft2_out_valid_r <= fft2_out_valid_n;
+
+      if (dsp_rst) begin
+         fft1_out_valid_r <= 1'b0;
+         fft2_out_valid_r <= 1'b0;
+      end
+
+   end
+
+   assign fft1_out_real  = fft1_out_real_r;
+   assign fft1_out_imag  = fft1_out_imag_r;
+   assign fft1_out_index = fft1_out_index_r;
+   assign fft1_out_valid = fft1_out_valid_r;
+
+   assign fft2_out_real  = fft2_out_real_r;
+   assign fft2_out_imag  = fft2_out_imag_r;
+   assign fft2_out_index = fft2_out_index_r;
+   assign fft2_out_valid = fft2_out_valid_r;
+
+   // TODO: add overflow detection, after rounding check if all the
+   // drop bits are 0 or 1, otherwise it's overflow. Can compute and
+   // register the mask for this check.
+
+endmodule
diff --git a/library/axi_sparSDR/mem_init_files/avg_1024.mif b/library/axi_sparSDR/mem_init_files/avg_1024.mif
new file mode 100755
index 00000000..afe943d5
--- /dev/null
+++ b/library/axi_sparSDR/mem_init_files/avg_1024.mif
@@ -0,0 +1,512 @@
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
+00000000000000000000000000000000
diff --git a/library/axi_sparSDR/mem_init_files/hanning_coeffs_1024.mif b/library/axi_sparSDR/mem_init_files/hanning_coeffs_1024.mif
new file mode 100644
index 00000000..e9255c16
--- /dev/null
+++ b/library/axi_sparSDR/mem_init_files/hanning_coeffs_1024.mif
@@ -0,0 +1,1024 @@
+0000000000000000
+0000000000000001
+0000000000000010
+0000000000000110
+0000000000001010
+0000000000001111
+0000000000010110
+0000000000011110
+0000000000101000
+0000000000110010
+0000000000111110
+0000000001001011
+0000000001011001
+0000000001101000
+0000000001111001
+0000000010001011
+0000000010011110
+0000000010110010
+0000000011001000
+0000000011011111
+0000000011110111
+0000000100010000
+0000000100101011
+0000000101000110
+0000000101100011
+0000000110000010
+0000000110100001
+0000000111000010
+0000000111100011
+0000001000000110
+0000001000101011
+0000001001010000
+0000001001110111
+0000001010011111
+0000001011001000
+0000001011110010
+0000001100011110
+0000001101001010
+0000001101111000
+0000001110101000
+0000001111011000
+0000010000001001
+0000010000111100
+0000010001110000
+0000010010100101
+0000010011011100
+0000010100010011
+0000010101001100
+0000010110000110
+0000010111000001
+0000010111111101
+0000011000111010
+0000011001111001
+0000011010111001
+0000011011111010
+0000011100111100
+0000011101111111
+0000011111000100
+0000100000001001
+0000100001010000
+0000100010011000
+0000100011100001
+0000100100101011
+0000100101110111
+0000100111000011
+0000101000010001
+0000101001100000
+0000101010101111
+0000101100000001
+0000101101010011
+0000101110100110
+0000101111111011
+0000110001010000
+0000110010100111
+0000110011111111
+0000110101010111
+0000110110110001
+0000111000001101
+0000111001101001
+0000111011000110
+0000111100100101
+0000111110000100
+0000111111100101
+0001000001000110
+0001000010101001
+0001000100001101
+0001000101110010
+0001000111011000
+0001001000111111
+0001001010100111
+0001001100010000
+0001001101111010
+0001001111100101
+0001010001010010
+0001010010111111
+0001010100101101
+0001010110011101
+0001011000001101
+0001011001111111
+0001011011110001
+0001011101100101
+0001011111011001
+0001100001001111
+0001100011000101
+0001100100111101
+0001100110110101
+0001101000101111
+0001101010101001
+0001101100100100
+0001101110100001
+0001110000011110
+0001110010011101
+0001110100011100
+0001110110011100
+0001111000011101
+0001111010011111
+0001111100100011
+0001111110100111
+0010000000101100
+0010000010110001
+0010000100111000
+0010000111000000
+0010001001001001
+0010001011010010
+0010001101011101
+0010001111101000
+0010010001110100
+0010010100000001
+0010010110001111
+0010011000011110
+0010011010101110
+0010011100111110
+0010011111010000
+0010100001100010
+0010100011110101
+0010100110001001
+0010101000011110
+0010101010110100
+0010101101001010
+0010101111100001
+0010110001111010
+0010110100010010
+0010110110101100
+0010111001000111
+0010111011100010
+0010111101111110
+0011000000011011
+0011000010111000
+0011000101010111
+0011000111110110
+0011001010010110
+0011001100110111
+0011001111011000
+0011010001111010
+0011010100011101
+0011010111000000
+0011011001100101
+0011011100001010
+0011011110101111
+0011100001010110
+0011100011111101
+0011100110100101
+0011101001001101
+0011101011110110
+0011101110100000
+0011110001001011
+0011110011110110
+0011110110100010
+0011111001001110
+0011111011111011
+0011111110101001
+0100000001010111
+0100000100000110
+0100000110110101
+0100001001100110
+0100001100010110
+0100001111001000
+0100010001111001
+0100010100101100
+0100010111011111
+0100011010010010
+0100011101000111
+0100011111111011
+0100100010110001
+0100100101100110
+0100101000011101
+0100101011010011
+0100101110001011
+0100110001000011
+0100110011111011
+0100110110110100
+0100111001101101
+0100111100100111
+0100111111100001
+0101000010011100
+0101000101010111
+0101001000010011
+0101001011001111
+0101001110001011
+0101010001001000
+0101010100000101
+0101010111000011
+0101011010000001
+0101011101000000
+0101011111111111
+0101100010111110
+0101100101111110
+0101101000111110
+0101101011111111
+0101101111000000
+0101110010000001
+0101110101000010
+0101111000000100
+0101111011000110
+0101111110001001
+0110000001001100
+0110000100001111
+0110000111010010
+0110001010010110
+0110001101011010
+0110010000011110
+0110010011100011
+0110010110101000
+0110011001101101
+0110011100110010
+0110011111111000
+0110100010111101
+0110100110000011
+0110101001001010
+0110101100010000
+0110101111010111
+0110110010011110
+0110110101100101
+0110111000101100
+0110111011110011
+0110111110111011
+0111000010000010
+0111000101001010
+0111001000010010
+0111001011011010
+0111001110100011
+0111010001101011
+0111010100110100
+0111010111111100
+0111011011000101
+0111011110001110
+0111100001010110
+0111100100011111
+0111100111101000
+0111101010110001
+0111101101111011
+0111110001000100
+0111110100001101
+0111110111010110
+0111111010011111
+0111111101101001
+1000000000110010
+1000000011111011
+1000000111000100
+1000001010001110
+1000001101010111
+1000010000100000
+1000010011101001
+1000010110110010
+1000011001111011
+1000011101000100
+1000100000001101
+1000100011010110
+1000100110011111
+1000101001100111
+1000101100110000
+1000101111111000
+1000110011000000
+1000110110001001
+1000111001010001
+1000111100011001
+1000111111100000
+1001000010101000
+1001000101110000
+1001001000110111
+1001001011111110
+1001001111000101
+1001010010001100
+1001010101010010
+1001011000011000
+1001011011011111
+1001011110100101
+1001100001101010
+1001100100110000
+1001100111110101
+1001101010111010
+1001101101111110
+1001110001000011
+1001110100000111
+1001110111001011
+1001111010001110
+1001111101010010
+1010000000010101
+1010000011010111
+1010000110011010
+1010001001011100
+1010001100011110
+1010001111011111
+1010010010100000
+1010010101100001
+1010011000100001
+1010011011100001
+1010011110100000
+1010100001100000
+1010100100011110
+1010100111011101
+1010101010011011
+1010101101011000
+1010110000010101
+1010110011010010
+1010110110001110
+1010111001001010
+1010111100000110
+1010111111000001
+1011000001111011
+1011000100110101
+1011000111101111
+1011001010101000
+1011001101100000
+1011010000011000
+1011010011010000
+1011010110000111
+1011011000111110
+1011011011110100
+1011011110101001
+1011100001011110
+1011100100010011
+1011100111000110
+1011101001111010
+1011101100101100
+1011101111011111
+1011110010010000
+1011110101000001
+1011110111110010
+1011111010100001
+1011111101010001
+1011111111111111
+1100000010101101
+1100000101011011
+1100001000000111
+1100001010110011
+1100001101011111
+1100010000001010
+1100010010110100
+1100010101011101
+1100011000000110
+1100011010101110
+1100011101010110
+1100011111111100
+1100100010100010
+1100100101001000
+1100100111101100
+1100101010010000
+1100101100110100
+1100101111010110
+1100110001111000
+1100110100011001
+1100110110111001
+1100111001011001
+1100111011110111
+1100111110010101
+1101000000110011
+1101000011001111
+1101000101101011
+1101001000000110
+1101001010100000
+1101001100111001
+1101001111010010
+1101010001101001
+1101010100000000
+1101010110010110
+1101011000101100
+1101011011000000
+1101011101010011
+1101011111100110
+1101100001111000
+1101100100001001
+1101100110011001
+1101101000101001
+1101101010110111
+1101101101000100
+1101101111010001
+1101110001011101
+1101110011101000
+1101110101110010
+1101110111111011
+1101111010000011
+1101111100001010
+1101111110010001
+1110000000010110
+1110000010011011
+1110000100011110
+1110000110100001
+1110001000100010
+1110001010100011
+1110001100100011
+1110001110100010
+1110010000100000
+1110010010011100
+1110010100011000
+1110010110010011
+1110011000001101
+1110011010000110
+1110011011111110
+1110011101110101
+1110011111101011
+1110100001100000
+1110100011010100
+1110100101000111
+1110100110111001
+1110101000101010
+1110101010011010
+1110101100001001
+1110101101110111
+1110101111100100
+1110110001001111
+1110110010111010
+1110110100100100
+1110110110001100
+1110110111110100
+1110111001011010
+1110111011000000
+1110111100100100
+1110111110000111
+1110111111101010
+1111000001001011
+1111000010101011
+1111000100001010
+1111000101101000
+1111000111000100
+1111001000100000
+1111001001111011
+1111001011010100
+1111001100101100
+1111001110000100
+1111001111011010
+1111010000101111
+1111010010000011
+1111010011010101
+1111010100100111
+1111010101111000
+1111010111000111
+1111011000010101
+1111011001100010
+1111011010101110
+1111011011111001
+1111011101000011
+1111011110001011
+1111011111010011
+1111100000011001
+1111100001011110
+1111100010100010
+1111100011100100
+1111100100100110
+1111100101100110
+1111100110100101
+1111100111100011
+1111101000100000
+1111101001011100
+1111101010010110
+1111101011010000
+1111101100001000
+1111101100111111
+1111101101110100
+1111101110101001
+1111101111011100
+1111110000001110
+1111110000111111
+1111110001101111
+1111110010011110
+1111110011001011
+1111110011110111
+1111110100100010
+1111110101001100
+1111110101110100
+1111110110011100
+1111110111000010
+1111110111100111
+1111111000001010
+1111111000101101
+1111111001001110
+1111111001101110
+1111111010001101
+1111111010101010
+1111111011000111
+1111111011100010
+1111111011111100
+1111111100010100
+1111111100101100
+1111111101000010
+1111111101010111
+1111111101101011
+1111111101111101
+1111111110001110
+1111111110011110
+1111111110101101
+1111111110111011
+1111111111000111
+1111111111010010
+1111111111011100
+1111111111100101
+1111111111101100
+1111111111110010
+1111111111110111
+1111111111111011
+1111111111111110
+1111111111111111
+1111111111111111
+1111111111111110
+1111111111111011
+1111111111110111
+1111111111110010
+1111111111101100
+1111111111100101
+1111111111011100
+1111111111010010
+1111111111000111
+1111111110111011
+1111111110101101
+1111111110011110
+1111111110001110
+1111111101111101
+1111111101101011
+1111111101010111
+1111111101000010
+1111111100101100
+1111111100010100
+1111111011111100
+1111111011100010
+1111111011000111
+1111111010101010
+1111111010001101
+1111111001101110
+1111111001001110
+1111111000101101
+1111111000001010
+1111110111100111
+1111110111000010
+1111110110011100
+1111110101110100
+1111110101001100
+1111110100100010
+1111110011110111
+1111110011001011
+1111110010011110
+1111110001101111
+1111110000111111
+1111110000001110
+1111101111011100
+1111101110101001
+1111101101110100
+1111101100111111
+1111101100001000
+1111101011010000
+1111101010010110
+1111101001011100
+1111101000100000
+1111100111100011
+1111100110100101
+1111100101100110
+1111100100100110
+1111100011100100
+1111100010100010
+1111100001011110
+1111100000011001
+1111011111010011
+1111011110001011
+1111011101000011
+1111011011111001
+1111011010101110
+1111011001100010
+1111011000010101
+1111010111000111
+1111010101111000
+1111010100100111
+1111010011010101
+1111010010000011
+1111010000101111
+1111001111011010
+1111001110000100
+1111001100101100
+1111001011010100
+1111001001111011
+1111001000100000
+1111000111000100
+1111000101101000
+1111000100001010
+1111000010101011
+1111000001001011
+1110111111101010
+1110111110000111
+1110111100100100
+1110111011000000
+1110111001011010
+1110110111110100
+1110110110001100
+1110110100100100
+1110110010111010
+1110110001001111
+1110101111100100
+1110101101110111
+1110101100001001
+1110101010011010
+1110101000101010
+1110100110111001
+1110100101000111
+1110100011010100
+1110100001100000
+1110011111101011
+1110011101110101
+1110011011111110
+1110011010000110
+1110011000001101
+1110010110010011
+1110010100011000
+1110010010011100
+1110010000100000
+1110001110100010
+1110001100100011
+1110001010100011
+1110001000100010
+1110000110100001
+1110000100011110
+1110000010011011
+1110000000010110
+1101111110010001
+1101111100001010
+1101111010000011
+1101110111111011
+1101110101110010
+1101110011101000
+1101110001011101
+1101101111010001
+1101101101000100
+1101101010110111
+1101101000101001
+1101100110011001
+1101100100001001
+1101100001111000
+1101011111100110
+1101011101010011
+1101011011000000
+1101011000101100
+1101010110010110
+1101010100000000
+1101010001101001
+1101001111010010
+1101001100111001
+1101001010100000
+1101001000000110
+1101000101101011
+1101000011001111
+1101000000110011
+1100111110010101
+1100111011110111
+1100111001011001
+1100110110111001
+1100110100011001
+1100110001111000
+1100101111010110
+1100101100110100
+1100101010010000
+1100100111101100
+1100100101001000
+1100100010100010
+1100011111111100
+1100011101010110
+1100011010101110
+1100011000000110
+1100010101011101
+1100010010110100
+1100010000001010
+1100001101011111
+1100001010110011
+1100001000000111
+1100000101011011
+1100000010101101
+1011111111111111
+1011111101010001
+1011111010100001
+1011110111110010
+1011110101000001
+1011110010010000
+1011101111011111
+1011101100101100
+1011101001111010
+1011100111000110
+1011100100010011
+1011100001011110
+1011011110101001
+1011011011110100
+1011011000111110
+1011010110000111
+1011010011010000
+1011010000011000
+1011001101100000
+1011001010101000
+1011000111101111
+1011000100110101
+1011000001111011
+1010111111000001
+1010111100000110
+1010111001001010
+1010110110001110
+1010110011010010
+1010110000010101
+1010101101011000
+1010101010011011
+1010100111011101
+1010100100011110
+1010100001100000
+1010011110100000
+1010011011100001
+1010011000100001
+1010010101100001
+1010010010100000
+1010001111011111
+1010001100011110
+1010001001011100
+1010000110011010
+1010000011010111
+1010000000010101
+1001111101010010
+1001111010001110
+1001110111001011
+1001110100000111
+1001110001000011
+1001101101111110
+1001101010111010
+1001100111110101
+1001100100110000
+1001100001101010
+1001011110100101
+1001011011011111
+1001011000011000
+1001010101010010
+1001010010001100
+1001001111000101
+1001001011111110
+1001001000110111
+1001000101110000
+1001000010101000
+1000111111100000
+1000111100011001
+1000111001010001
+1000110110001001
+1000110011000000
+1000101111111000
+1000101100110000
+1000101001100111
+1000100110011111
+1000100011010110
+1000100000001101
+1000011101000100
+1000011001111011
+1000010110110010
+1000010011101001
+1000010000100000
+1000001101010111
+1000001010001110
+1000000111000100
+1000000011111011
+1000000000110010
+0111111101101001
+0111111010011111
+0111110111010110
+0111110100001101
+0111110001000100
+0111101101111011
+0111101010110001
+0111100111101000
+0111100100011111
+0111100001010110
+0111011110001110
+0111011011000101
+0111010111111100
+0111010100110100
+0111010001101011
+0111001110100011
+0111001011011010
+0111001000010010
+0111000101001010
+0111000010000010
+0110111110111011
+0110111011110011
+0110111000101100
+0110110101100101
+0110110010011110
+0110101111010111
+0110101100010000
+0110101001001010
+0110100110000011
+0110100010111101
+0110011111111000
+0110011100110010
+0110011001101101
+0110010110101000
+0110010011100011
+0110010000011110
+0110001101011010
+0110001010010110
+0110000111010010
+0110000100001111
+0110000001001100
+0101111110001001
+0101111011000110
+0101111000000100
+0101110101000010
+0101110010000001
+0101101111000000
+0101101011111111
+0101101000111110
+0101100101111110
+0101100010111110
+0101011111111111
+0101011101000000
+0101011010000001
+0101010111000011
+0101010100000101
+0101010001001000
+0101001110001011
+0101001011001111
+0101001000010011
+0101000101010111
+0101000010011100
+0100111111100001
+0100111100100111
+0100111001101101
+0100110110110100
+0100110011111011
+0100110001000011
+0100101110001011
+0100101011010011
+0100101000011101
+0100100101100110
+0100100010110001
+0100011111111011
+0100011101000111
+0100011010010010
+0100010111011111
+0100010100101100
+0100010001111001
+0100001111001000
+0100001100010110
+0100001001100110
+0100000110110101
+0100000100000110
+0100000001010111
+0011111110101001
+0011111011111011
+0011111001001110
+0011110110100010
+0011110011110110
+0011110001001011
+0011101110100000
+0011101011110110
+0011101001001101
+0011100110100101
+0011100011111101
+0011100001010110
+0011011110101111
+0011011100001010
+0011011001100101
+0011010111000000
+0011010100011101
+0011010001111010
+0011001111011000
+0011001100110111
+0011001010010110
+0011000111110110
+0011000101010111
+0011000010111000
+0011000000011011
+0010111101111110
+0010111011100010
+0010111001000111
+0010110110101100
+0010110100010010
+0010110001111010
+0010101111100001
+0010101101001010
+0010101010110100
+0010101000011110
+0010100110001001
+0010100011110101
+0010100001100010
+0010011111010000
+0010011100111110
+0010011010101110
+0010011000011110
+0010010110001111
+0010010100000001
+0010010001110100
+0010001111101000
+0010001101011101
+0010001011010010
+0010001001001001
+0010000111000000
+0010000100111000
+0010000010110001
+0010000000101100
+0001111110100111
+0001111100100011
+0001111010011111
+0001111000011101
+0001110110011100
+0001110100011100
+0001110010011101
+0001110000011110
+0001101110100001
+0001101100100100
+0001101010101001
+0001101000101111
+0001100110110101
+0001100100111101
+0001100011000101
+0001100001001111
+0001011111011001
+0001011101100101
+0001011011110001
+0001011001111111
+0001011000001101
+0001010110011101
+0001010100101101
+0001010010111111
+0001010001010010
+0001001111100101
+0001001101111010
+0001001100010000
+0001001010100111
+0001001000111111
+0001000111011000
+0001000101110010
+0001000100001101
+0001000010101001
+0001000001000110
+0000111111100101
+0000111110000100
+0000111100100101
+0000111011000110
+0000111001101001
+0000111000001101
+0000110110110001
+0000110101010111
+0000110011111111
+0000110010100111
+0000110001010000
+0000101111111011
+0000101110100110
+0000101101010011
+0000101100000001
+0000101010101111
+0000101001100000
+0000101000010001
+0000100111000011
+0000100101110111
+0000100100101011
+0000100011100001
+0000100010011000
+0000100001010000
+0000100000001001
+0000011111000100
+0000011101111111
+0000011100111100
+0000011011111010
+0000011010111001
+0000011001111001
+0000011000111010
+0000010111111101
+0000010111000001
+0000010110000110
+0000010101001100
+0000010100010011
+0000010011011100
+0000010010100101
+0000010001110000
+0000010000111100
+0000010000001001
+0000001111011000
+0000001110101000
+0000001101111000
+0000001101001010
+0000001100011110
+0000001011110010
+0000001011001000
+0000001010011111
+0000001001110111
+0000001001010000
+0000001000101011
+0000001000000110
+0000000111100011
+0000000111000010
+0000000110100001
+0000000110000010
+0000000101100011
+0000000101000110
+0000000100101011
+0000000100010000
+0000000011110111
+0000000011011111
+0000000011001000
+0000000010110010
+0000000010011110
+0000000010001011
+0000000001111001
+0000000001101000
+0000000001011001
+0000000001001011
+0000000000111110
+0000000000110010
+0000000000101000
+0000000000011110
+0000000000010110
+0000000000001111
+0000000000001010
+0000000000000110
+0000000000000010
+0000000000000001
+0000000000000000
diff --git a/library/axi_sparSDR/mem_init_files/init_gen.py b/library/axi_sparSDR/mem_init_files/init_gen.py
new file mode 100644
index 00000000..9cc282df
--- /dev/null
+++ b/library/axi_sparSDR/mem_init_files/init_gen.py
@@ -0,0 +1,39 @@
+#
+# Copyright 2019 The Regents of the University of California
+#
+# Licensed under either the GNU General Public License, version 2
+# ( https://www.gnu.org/licenses/old-licenses/gpl-2.0.html ) or the Apache
+# license, version 2.0 ( https://www.apache.org/licenses/LICENSE-2.0.html )
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+import numpy as np
+
+size = 1024
+threshold = 2000
+
+f = open("threshold_"+str(size)+".mif", 'w')
+for i in [bin(x)[2:].zfill(32) for x in size*[threshold]]:
+  f.write(i+'\n')
+f.close()
+
+f = open("mask_0_1_"+str(size-1)+".mif", 'w')
+for i in range(size):
+  f.write('0\n')
+f.close()
+
+f = open("hanning_coeffs_"+str(size)+".mif", 'w')
+for i in [bin(int(x))[2:].zfill(16) for x in list(np.rint(np.hanning(size)*(2**16-1)))]:
+  f.write(i+'\n')
+f.close()
+
+f = open("avg_"+str(size)+".mif", 'w')
+for i in [bin(x)[2:].zfill(32) for x in int(size/2)*[0]]:
+  f.write(i+'\n')
+f.close()
+
diff --git a/library/axi_sparSDR/mem_init_files/mask_0_1_1023.mif b/library/axi_sparSDR/mem_init_files/mask_0_1_1023.mif
new file mode 100755
index 00000000..69e7556d
--- /dev/null
+++ b/library/axi_sparSDR/mem_init_files/mask_0_1_1023.mif
@@ -0,0 +1,1024 @@
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
diff --git a/library/axi_sparSDR/mem_init_files/threshold_1024.mif b/library/axi_sparSDR/mem_init_files/threshold_1024.mif
new file mode 100644
index 00000000..5cf54799
--- /dev/null
+++ b/library/axi_sparSDR/mem_init_files/threshold_1024.mif
@@ -0,0 +1,1024 @@
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
+00000000000000000000011111010000
diff --git a/library/axi_sparSDR/mem_n_fifo.v b/library/axi_sparSDR/mem_n_fifo.v
new file mode 100755
index 00000000..9c691a15
--- /dev/null
+++ b/library/axi_sparSDR/mem_n_fifo.v
@@ -0,0 +1,166 @@
+/*
+ * Copyright 2019 The Regents of the University of California
+ *
+ * Licensed under either the GNU General Public License, version 2
+ * ( https://www.gnu.org/licenses/old-licenses/gpl-2.0.html ) or the Apache
+ * license, version 2.0 ( https://www.apache.org/licenses/LICENSE-2.0.html )
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+module mem_2rw # (
+  parameter DATA_WIDTH  = 32,
+  parameter ADDR_WIDTH  = 11,
+  parameter INIT_B_FILE = "",
+  parameter REG_OUTPUT  = 0
+)(
+  input                   clka,
+  input                   ena,
+  input                   wea,
+  input  [ADDR_WIDTH-1:0] addra,
+  input  [DATA_WIDTH-1:0] dina,
+  output [DATA_WIDTH-1:0] douta,
+
+  input                   clkb,
+  input                   enb,
+  input                   web,
+  input  [ADDR_WIDTH-1:0] addrb,
+  input  [DATA_WIDTH-1:0] dinb,
+  output [DATA_WIDTH-1:0] doutb
+);
+
+reg [DATA_WIDTH-1:0] mem [0:(2**ADDR_WIDTH)-1];
+reg [DATA_WIDTH-1:0] mem_out_a, mem_out_a_r;
+reg [DATA_WIDTH-1:0] mem_out_b, mem_out_b_r;
+
+always @ (posedge clka) begin
+    if (ena) begin
+        if (wea)
+            mem[addra] <= dina;
+        mem_out_a   <= mem[addra];
+    end
+end
+
+always @ (posedge clka) begin
+    mem_out_a_r <= mem_out_a;
+end
+
+always @ (posedge clkb) begin
+    if (enb) begin
+        if (web)
+            mem[addrb] <= dinb;
+        mem_out_b   <= mem[addrb];
+    end
+end
+
+always @ (posedge clkb) begin
+    mem_out_b_r <= mem_out_b;
+end
+
+assign douta = (REG_OUTPUT==1) ? mem_out_a_r : mem_out_a;
+assign doutb = (REG_OUTPUT==1) ? mem_out_b_r : mem_out_b;
+
+initial begin
+    if (INIT_B_FILE!="")
+        $readmemb(INIT_B_FILE,mem);
+end
+
+endmodule
+
+module simple_fifo # (
+  parameter ADDR_WIDTH = 11,
+  parameter DATA_WIDTH = 32
+)(
+  input clk,
+  input reset,
+  input clear,
+
+  input                		din_valid,
+  input [DATA_WIDTH-1:0]  din,
+  output               		din_ready,
+
+  output               		dout_valid,
+  output [DATA_WIDTH-1:0] dout,
+  input                		dout_ready
+);
+
+reg [ADDR_WIDTH-1:0] rptr, wptr;
+wire empty;
+reg full;
+
+localparam EMPTY    = 2'd0;
+localparam RD_WAIT  = 2'd1;
+localparam RD_READY = 2'd2;
+reg [1:0] rd_state;
+
+wire enque = din_valid  & din_ready;
+wire deque = dout_valid & dout_ready;
+
+mem_2rw #(.DATA_WIDTH(DATA_WIDTH),.ADDR_WIDTH(ADDR_WIDTH)) fifo_mem(
+   .clka(clk),
+   .ena(1'b1),
+   .wea(enque),
+   .addra(wptr),
+   .dina(din),
+   .douta(),
+
+   .clkb(clk),
+	 .enb((rd_state==RD_WAIT)|deque),
+   .web(1'b0),
+   .addrb(rptr),
+   .dinb({DATA_WIDTH{1'b0}}),
+   .doutb(dout)
+);
+
+always @ (posedge clk)
+	if (reset || clear) begin
+		wptr <= {ADDR_WIDTH{1'b0}};
+  end else if (enque) begin
+		wptr <= wptr + {{(ADDR_WIDTH-1){1'b0}},1'b1};
+  end
+
+always @(posedge clk)
+  if(reset || clear) begin
+	  rd_state <= EMPTY;
+		rptr     <= {ADDR_WIDTH{1'b0}};
+	end else case(rd_state)
+	  EMPTY: begin
+	    if(enque)
+		    rd_state <= RD_WAIT;
+	  end
+    RD_WAIT: begin
+		  rd_state <= RD_READY;
+			rptr     <= rptr + {{(ADDR_WIDTH-1){1'b0}},1'b1};
+	  end
+	  RD_READY: begin
+	    if(deque)
+	       if(rptr != wptr)
+			       rptr     <= rptr + {{(ADDR_WIDTH-1){1'b0}},1'b1};
+         else // We're empty, if there was an enque we can read it next cycle
+		       if(enque)
+		         rd_state <= RD_WAIT;
+		       else
+		         rd_state <= EMPTY;
+    end
+	endcase
+
+// Latching last transaction to know FIFO is full or empty
+always @ (posedge clk)
+	if (reset || clear) begin
+		full <= 1'b0;
+	end else if (enque | deque) begin
+    // Using RD_WAIT rptr is one ahead
+		full <= enque & ~deque & ((rptr-2) == wptr);
+	end
+
+assign empty = (rd_state!=RD_READY) | clear;
+
+assign din_ready  = ~full & ~reset;
+assign dout_valid = ~empty;
+
+endmodule
diff --git a/projects/pluto/Makefile b/projects/pluto/Makefile
index 4c133863..ab7ecb89 100644
--- a/projects/pluto/Makefile
+++ b/projects/pluto/Makefile
@@ -2,6 +2,8 @@
 ## Copyright 2018(c) Analog Devices, Inc.
 ## Auto-generated, do not modify!
 ####################################################################################
+## Copyright 2019 The Regents of the University of California
+####################################################################################
 
 PROJECT_NAME := pluto
 
@@ -15,7 +17,7 @@ M_DEPS += ../../library/axi_ad9361/axi_ad9361_delay.tcl
 
 LIB_DEPS += axi_ad9361
 LIB_DEPS += axi_dmac
-LIB_DEPS += util_pack/util_cpack2
-LIB_DEPS += util_pack/util_upack2
+LIB_DEPS += util_fir_int
+LIB_DEPS += axi_sparSDR
 
 include ../scripts/project-xilinx.mk
diff --git a/projects/pluto/system_bd.tcl b/projects/pluto/system_bd.tcl
index 8a9634b9..5701fd2a 100644
--- a/projects/pluto/system_bd.tcl
+++ b/projects/pluto/system_bd.tcl
@@ -1,8 +1,4 @@
 # create board design
-
-
-source $ad_hdl_dir/projects/common/xilinx/adi_fir_filter_bd.tcl
-
 # default ports
 
 create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 ddr
@@ -190,22 +186,20 @@ create_bd_port -dir I up_txnrx
 ad_ip_instance axi_ad9361 axi_ad9361
 ad_ip_parameter axi_ad9361 CONFIG.ID 0
 ad_ip_parameter axi_ad9361 CONFIG.CMOS_OR_LVDS_N 1
-ad_ip_parameter axi_ad9361 CONFIG.MODE_1R1T 0
+ad_ip_parameter axi_ad9361 CONFIG.MODE_1R1T 1
 ad_ip_parameter axi_ad9361 CONFIG.ADC_INIT_DELAY 21
 
 ad_ip_instance axi_dmac axi_ad9361_dac_dma
 ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_TYPE_SRC 0
-ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_TYPE_DEST 1
+ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_TYPE_DEST 2
 ad_ip_parameter axi_ad9361_dac_dma CONFIG.CYCLIC 1
 ad_ip_parameter axi_ad9361_dac_dma CONFIG.AXI_SLICE_SRC 0
 ad_ip_parameter axi_ad9361_dac_dma CONFIG.AXI_SLICE_DEST 0
 ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_2D_TRANSFER 0
-ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_DATA_WIDTH_DEST 64
+ad_ip_parameter axi_ad9361_dac_dma CONFIG.DMA_DATA_WIDTH_DEST 32
 
-ad_add_interpolation_filter "tx_fir_interpolator" 8 2 1 {61.44} {7.68} \
-                             "$ad_hdl_dir/library/util_fir_int/coefile_int.coe"
+ad_ip_instance util_fir_int fir_interpolator
 ad_ip_instance xlslice interp_slice
-ad_ip_instance util_upack2 tx_upack
 
 ad_ip_instance axi_dmac axi_ad9361_adc_dma
 ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_TYPE_SRC 2
@@ -215,12 +209,9 @@ ad_ip_parameter axi_ad9361_adc_dma CONFIG.SYNC_TRANSFER_START 0
 ad_ip_parameter axi_ad9361_adc_dma CONFIG.AXI_SLICE_SRC 0
 ad_ip_parameter axi_ad9361_adc_dma CONFIG.AXI_SLICE_DEST 0
 ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_2D_TRANSFER 0
-ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_DATA_WIDTH_SRC 64
+ad_ip_parameter axi_ad9361_adc_dma CONFIG.DMA_DATA_WIDTH_SRC 32
 
-ad_add_decimation_filter "rx_fir_decimator" 8 2 1 {61.44} {61.44} \
-                         "$ad_hdl_dir/library/util_fir_int/coefile_int.coe"
-ad_ip_instance xlslice decim_slice
-ad_ip_instance util_cpack2 cpack
+ad_ip_instance axi_sparSDR axi_sparSDR
 
 # connections
 
@@ -239,71 +230,29 @@ ad_connect  axi_ad9361/tdd_sync GND
 ad_connect  sys_200m_clk axi_ad9361/delay_clk
 ad_connect  axi_ad9361/l_clk axi_ad9361/clk
 
-ad_connect axi_ad9361/l_clk rx_fir_decimator/aclk
-
-ad_connect axi_ad9361/adc_valid_i0 rx_fir_decimator/valid_in_0
-ad_connect axi_ad9361/adc_enable_i0 rx_fir_decimator/enable_in_0
-ad_connect axi_ad9361/adc_data_i0 rx_fir_decimator/data_in_0
-ad_connect axi_ad9361/adc_valid_q0 rx_fir_decimator/valid_in_1
-ad_connect axi_ad9361/adc_enable_q0 rx_fir_decimator/enable_in_1
-ad_connect axi_ad9361/adc_data_q0 rx_fir_decimator/data_in_1
-
-ad_connect axi_ad9361/l_clk cpack/clk
-ad_connect axi_ad9361/rst cpack/reset
-
-ad_connect axi_ad9361/adc_enable_i1 cpack/enable_2
-ad_connect axi_ad9361/adc_data_i1 cpack/fifo_wr_data_2
-ad_connect axi_ad9361/adc_enable_q1 cpack/enable_3
-ad_connect axi_ad9361/adc_data_q1 cpack/fifo_wr_data_3
-
-ad_connect cpack/enable_0 rx_fir_decimator/enable_out_0
-ad_connect cpack/enable_1 rx_fir_decimator/enable_out_1
-ad_connect cpack/fifo_wr_data_0 rx_fir_decimator/data_out_0
-ad_connect cpack/fifo_wr_data_1 rx_fir_decimator/data_out_1
-ad_connect rx_fir_decimator/valid_out_0 cpack/fifo_wr_en
-
-ad_connect axi_ad9361_adc_dma/fifo_wr cpack/packed_fifo_wr
-ad_connect axi_ad9361/up_adc_gpio_out decim_slice/Din
-ad_connect rx_fir_decimator/active decim_slice/Dout
-
-ad_connect axi_ad9361/l_clk tx_fir_interpolator/aclk
-
-ad_connect axi_ad9361/dac_enable_i0 tx_fir_interpolator/dac_enable_0
-ad_connect axi_ad9361/dac_valid_i0 tx_fir_interpolator/dac_valid_0
-ad_connect axi_ad9361/dac_data_i0 tx_fir_interpolator/data_out_0
-ad_connect axi_ad9361/dac_enable_q0 tx_fir_interpolator/dac_enable_1
-ad_connect axi_ad9361/dac_valid_q0 tx_fir_interpolator/dac_valid_1
-ad_connect axi_ad9361/dac_data_q0 tx_fir_interpolator/data_out_1
-
-ad_connect  axi_ad9361/l_clk tx_upack/clk
-ad_connect  axi_ad9361/rst tx_upack/reset
-
-ad_connect  tx_upack/fifo_rd_data_0  tx_fir_interpolator/data_in_0
-ad_connect  tx_upack/enable_0  tx_fir_interpolator/enable_out_0
-ad_connect  tx_upack/fifo_rd_data_1  tx_fir_interpolator/data_in_1
-ad_connect  tx_upack/enable_1  tx_fir_interpolator/enable_out_1
-
-ad_connect axi_ad9361/dac_enable_i1 tx_upack/enable_2
-ad_connect axi_ad9361/dac_data_i1 tx_upack/fifo_rd_data_2
-ad_connect axi_ad9361/dac_enable_q1 tx_upack/enable_3
-ad_connect axi_ad9361/dac_data_q1 tx_upack/fifo_rd_data_3
-
-ad_connect tx_upack/s_axis  axi_ad9361_dac_dma/m_axis
-
-ad_ip_instance util_vector_logic logic_or [list \
-  C_OPERATION {or} \
-  C_SIZE 1]
-
-ad_connect  logic_or/Op1  tx_fir_interpolator/valid_out_0
-ad_connect  logic_or/Op2  axi_ad9361/dac_valid_i1
-ad_connect  logic_or/Res  tx_upack/fifo_rd_en
-
+ad_connect axi_ad9361/l_clk axi_sparSDR/lgc_clk
+ad_connect axi_ad9361/adc_data_i0 axi_sparSDR/sample_real
+ad_connect axi_ad9361/adc_data_q0 axi_sparSDR/sample_imag
+ad_connect axi_ad9361_adc_dma/fifo_wr_din axi_sparSDR/sparSDR_data
+ad_connect axi_ad9361_adc_dma/fifo_wr_en axi_sparSDR/sparSDR_valid
+ad_connect axi_ad9361_adc_dma/fifo_wr_overflow axi_sparSDR/dest_full
+
+ad_connect axi_ad9361/l_clk fir_interpolator/aclk
+ad_connect axi_ad9361_dac_dma/fifo_rd_dout fir_interpolator/s_axis_data_tdata
+ad_connect axi_ad9361_dac_dma/fifo_rd_valid fir_interpolator/s_axis_data_tvalid
+ad_connect axi_ad9361/dac_valid_i0 fir_interpolator/dac_read
+ad_connect axi_ad9361_dac_dma/fifo_rd_en fir_interpolator/s_axis_data_tready
+ad_connect axi_ad9361/dac_data_i0 fir_interpolator/channel_0
+ad_connect axi_ad9361/dac_data_q0 fir_interpolator/channel_1
 ad_connect axi_ad9361/up_dac_gpio_out interp_slice/Din
-ad_connect  tx_fir_interpolator/active interp_slice/Dout
+ad_connect fir_interpolator/interpolate interp_slice/Dout
 
 ad_connect  axi_ad9361/l_clk axi_ad9361_adc_dma/fifo_wr_clk
-ad_connect  axi_ad9361/l_clk axi_ad9361_dac_dma/m_axis_aclk
-ad_connect  cpack/fifo_wr_overflow axi_ad9361/adc_dovf
+ad_connect  axi_ad9361_adc_dma/fifo_wr_overflow axi_ad9361/adc_dovf
+ad_connect  axi_ad9361/l_clk axi_ad9361_dac_dma/fifo_rd_clk
+ad_connect  axi_ad9361_dac_dma/fifo_rd_underflow axi_ad9361/dac_dunf
+ad_connect  axi_ad9361/dac_data_i1 GND
+ad_connect  axi_ad9361/dac_data_q1 GND
 
 # interconnects
 
@@ -311,6 +260,7 @@ ad_cpu_interconnect 0x79020000 axi_ad9361
 ad_cpu_interconnect 0x7C400000 axi_ad9361_adc_dma
 ad_cpu_interconnect 0x7C420000 axi_ad9361_dac_dma
 ad_cpu_interconnect 0x7C430000 axi_spi
+ad_cpu_interconnect 0x7C440000 axi_sparSDR
 
 ad_ip_parameter sys_ps7 CONFIG.PCW_USE_S_AXI_HP1 {1}
 ad_connect sys_cpu_clk sys_ps7/S_AXI_HP1_ACLK
-- 
2.17.1

